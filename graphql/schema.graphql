"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

directive @key(fields: _FieldSet!) on OBJECT | INTERFACE

directive @external on FIELD_DEFINITION

directive @cacheControl(maxAge: Int, scope: CacheControlScope, inheritMaxAge: Boolean) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @sameAs(uri: URI) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION

scalar _Any

"""A union of all federated types (those that use the @key directive)."""
union _Entity = Config | EditorialCategory | Item | ProgramSet | PublicationService | Organization | PermanentLivestream | AudioBinary | Grouping | CategoriesToProgramSet | Concept | Transcript | EditorialCollection | Migration | ImageBinary | ImageCollection | Image

"""
Used to represent a set of fields. Grammatically, a field set is a
selection set minus the braces.
"""
scalar _FieldSet

"""Describes our federated service."""
type _Service {
  """
  The GraphQL Schema Language definiton of our endpoint including the
  Apollo Federation directives (but not their definitions or the special
  Apollo Federation fields).
  """
  sdl: String @deprecated(reason: "Only Apollo Federation should use this")
}

enum AspectRatio {
  SQUARE
  ASPECT_16x9
}

type AssetType {
  """absolute path to media asset"""
  url: URL!

  """optional download URL, hide download button when null"""
  downloadUrl: URL
  allowDownload: Boolean

  """file size in byte"""
  size: Int

  """title to be displayed in download tab e.g. 'MPEG-4 AAC Audio (m4a)'"""
  title: String

  """media asset mimeType e.g. 'audio/mp4'"""
  mimeType: String!
}

type AudioBinary implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  rowId: String!
  coreDocument: JSON
  href: String!
  availableFrom: Datetime
  availableTo: Datetime
  title: String
  adaptivity: String
  distributionType: String
  packaging: String
  audioChannel: String
  audioBitrate: Int
  audioCodec: String
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """Not included in the specified list."""
  notIn: [BigInt!]

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt
}

input BigIntFilterB {
  """ A filter that matches if the value of the property is equal to the specified value 
  """
  eq: BigInt

  """ A filter that matches if the value of the property not equal to the specified value 
  """
  ne: BigInt

  """ A filter that matches if the value of the property is one of the values in the specified list 
  """
  in: [BigInt]

  """ A filter that matches if the value of the property is greater than the specified value 
  """
  gt: BigInt

  """ A filter that matches if the value of the property is greater than or equal to the specified value 
  """
  gte: BigInt

  """ A filter that matches if the value of the property is less than the specified value 
  """
  lt: BigInt

  """ A filter that matches if the value of the property is less than or equal to the specified value 
  """
  lte: BigInt
}

type Board {
  _links: JSON @deprecated(reason: "only for old / hal-json queries")
  tracking: JSON
  id: ID!
  title: String
  image: ImageType
  sections(hideUnresolvedTeasers: Boolean = true, hidePersonaliziedSections: Boolean = false, hideErrors: Boolean = true, limit: Int, offset: Int = 0): [Section!]
  widgets: [SophoraWidget!]
  sharingUrl: URL
  _raw: JSON @deprecated(reason: "only for internal debugging")
  recentItems(first: Int, last: Int, offset: Int, before: Cursor, after: Cursor, orderBy: [ItemsOrderBy!], condition: ItemCondition, filter: ItemFilter): ItemsConnection!
  recentItemsList(first: Int, offset: Int, orderBy: [ItemsOrderBy!], condition: ItemCondition, filter: ItemFilter): [Item!]
  programSets(first: Int, last: Int, offset: Int, before: Cursor, after: Cursor, orderBy: [ProgramSetsOrderBy!] = [PRIMARY_KEY_ASC], condition: ProgramSetCondition, filter: ProgramSetFilter): EditorialCategoryProgramSetsManyToManyConnection!
  programSetsList(first: Int, offset: Int, orderBy: [ProgramSetsOrderBy!], condition: ProgramSetCondition, filter: ProgramSetFilter): [ProgramSet!]!
}

""" A bookmarked item. (de: Lesezeichen, en: Bookmark) """
type Bookmark implements BookmarkInterface {
  id: ID!
  baseIdPrefix: String!

  """  () """
  belongsTo: BookmarkListInterface

  """ The time the user created that bookmark. (de: Lesezeichen gesetzt am, en: bookmarked at) 
  """
  bookmarkedAt: DateTime

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ An associated item. (de: Item, en: item) """
  item: Item

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime
}

""" This is a generated connection for Bookmark """
type BookmarkConnection {
  count: Int
  edges: [BookmarkEdge]
  nodes: [BookmarkInterface]
  pageInfo: PageInfo!
}

input BookmarkConnectionFilterB {
  """ Filter by values of property bookmarkedAt """
  bookmarkedAt: DateFilterB

  """ Filter by values of property createdAt """
  createdAt: DateFilterB

  """ Filter by values of property modifiedAt """
  modifiedAt: DateFilterB

  """ A filter that matches empty connections. """
  empty: BooleanFilterB
}

""" Input parameter for the create mutation of Bookmark """
input BookmarkCreateInput {
  """ The type of the created object. Defaults to Bookmark """
  type: String = "Bookmark"

  """ The time the user created that bookmark. (de: Lesezeichen gesetzt am, en: bookmarked at) 
  """
  bookmarkedAt: DateTime

  """ An associated item. (de: Item, en: item) """
  item: ItemCreateInput!
}

"""  This is a generated edge for Bookmark """
type BookmarkEdge {
  cursor: String!
  node: BookmarkInterface
}

input BookmarkFilterB {
  """ Filter by values of property bookmarkedAt """
  bookmarkedAt: DateFilterB

  """ Filter by values of property createdAt """
  createdAt: DateFilterB

  """ Filter by values of property modifiedAt """
  modifiedAt: DateFilterB
}

""" A bookmarked item. (de: Lesezeichen, en: Bookmark) """
interface BookmarkInterface {
  id: ID!
  baseIdPrefix: String!

  """  () """
  belongsTo: BookmarkListInterface

  """ The time the user created that bookmark. (de: Lesezeichen gesetzt am, en: bookmarked at) 
  """
  bookmarkedAt: DateTime

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ An associated item. (de: Item, en: item) """
  item: Item

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime
}

""" undefined (not documented) """
type BookmarkList implements BookmarkListInterface {
  id: ID!
  baseIdPrefix: String!

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """  () """
  entries(after: String, first: Int, before: String, last: Int, filter: BookmarkFilterB, orderBy: BookmarkSortOrder): BookmarkConnection

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """ Associates Subscriptions, History items, Playlists, the Queue and User Properties with a user. (de: User, en: user) 
  """
  user: EndUserInterface
}

""" This is a generated connection for BookmarkList """
type BookmarkListConnection {
  count: Int
  edges: [BookmarkListEdge]
  nodes: [BookmarkListInterface]
  pageInfo: PageInfo!
}

input BookmarkListConnectionFilterB {
  """ A filter that matches empty connections. """
  empty: BooleanFilterB

  """ A filter that matches if the specified ID is part of the connection. """
  contains: ID
}

""" Input parameter for the create mutation of BookmarkList """
input BookmarkListCreateInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The type of the created object. Defaults to BookmarkList """
  type: String = "BookmarkList"

  """  () """
  entries: [BookmarkCreateInput]!
}

"""  This is a generated edge for BookmarkList """
type BookmarkListEdge {
  cursor: String!
  node: BookmarkListInterface
}

input BookmarkListEntryListInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String
  entry: BookmarkCreateInput!
  bookmarkList: ID!
}

input BookmarkListFilterB {
  """ Filter by values of property createdAt """
  createdAt: DateFilterB

  """ Filter by values of property entries """
  entries: BookmarkConnectionFilterB

  """ Filter by values of property modifiedAt """
  modifiedAt: DateFilterB

  """ Filter by values of property user """
  user: EndUserRelationFilterB
}

""" undefined (not documented) """
interface BookmarkListInterface {
  id: ID!
  baseIdPrefix: String!

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """  () """
  entries(after: String, first: Int, before: String, last: Int, filter: BookmarkFilterB, orderBy: BookmarkSortOrder): BookmarkConnection

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """ Associates Subscriptions, History items, Playlists, the Queue and User Properties with a user. (de: User, en: user) 
  """
  user: EndUserInterface
}

""" The payload returned from mutations of BookmarkList. """
type BookmarkListPayload {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The mutated object. """
  changedBookmarkList: BookmarkList
}

input BookmarkListRelationFilterB {
  """ A filter that matches when the relation points to the object with the specified ID. 
  """
  id: IDFilterB

  """ A filter that matches when the relation exists. """
  exists: BooleanFilterB
}

input BookmarkListRemoveAllListInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String
  bookmarkList: ID!
}

enum BookmarkListSortOrder {
  CREATEDAT_ASC
  CREATEDAT_DESC
  ENTRIES_BOOKMARKEDAT_ASC
  ENTRIES_BOOKMARKEDAT_DESC
  ENTRIES_CREATEDAT_ASC
  ENTRIES_CREATEDAT_DESC
  ENTRIES_ITEM_ID_ASC
  ENTRIES_ITEM_ID_DESC
  ENTRIES_MODIFIEDAT_ASC
  ENTRIES_MODIFIEDAT_DESC
  MODIFIEDAT_ASC
  MODIFIEDAT_DESC
}

""" Input parameter for the update mutation of BookmarkList """
input BookmarkListUpdateInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The ID of the updated object. """
  id: ID!

  """  () """
  entries: [BookmarkCreateInput]
}

""" The payload returned from mutations of Bookmark. """
type BookmarkPayload {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The mutated object. """
  changedBookmark: Bookmark
}

input BookmarkRelationFilterB {
  """ Filter by values of property bookmarkedAt """
  bookmarkedAt: DateFilterB

  """ Filter by values of property createdAt """
  createdAt: DateFilterB

  """ Filter by values of property modifiedAt """
  modifiedAt: DateFilterB
}

input BookmarkRemoveAllListInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String
  bookmark: ID!
}

enum BookmarkSortOrder {
  BOOKMARKEDAT_ASC
  BOOKMARKEDAT_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  ITEM_ID_ASC
  ITEM_ID_DESC
  MODIFIEDAT_ASC
  MODIFIEDAT_DESC
}

""" Input parameter for the update mutation of Bookmark """
input BookmarkUpdateInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The ID of the updated object. """
  id: ID!

  """ The time the user created that bookmark. (de: Lesezeichen gesetzt am, en: bookmarked at) 
  """
  bookmarkedAt: DateTime

  """ An associated item. (de: Item, en: item) """
  item: ItemCreateInput
}

type Bool {
  _fake: String
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

input BooleanFilterB {
  """ A filter that matches if the value of the property is equal to the specified value 
  """
  eq: Boolean

  """ A filter that matches if the value of the property not equal to the specified value 
  """
  ne: Boolean
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type CategoriesToProgramSet implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  programSetCoreId: String!
  categorySophoraId: String!

  """
  Reads a single `ProgramSet` that is related to this `CategoriesToProgramSet`.
  """
  programSetCore: ProgramSet

  """
  Reads a single `EditorialCategory` that is related to this `CategoriesToProgramSet`.
  """
  categorySophora: EditorialCategory
}

"""
A condition to be used against `CategoriesToProgramSet` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CategoriesToProgramSetCondition {
  """Checks for equality with the object’s `programSetCoreId` field."""
  programSetCoreId: String

  """Checks for equality with the object’s `categorySophoraId` field."""
  categorySophoraId: String
}

"""
A filter to be used against `CategoriesToProgramSet` object types. All fields are combined with a logical ‘and.’
"""
input CategoriesToProgramSetFilter {
  """Filter by the object’s `programSetCoreId` field."""
  programSetCoreId: StringFilter

  """Filter by the object’s `categorySophoraId` field."""
  categorySophoraId: StringFilter

  """Checks for all expressions in this list."""
  and: [CategoriesToProgramSetFilter!]

  """Checks for any expressions in this list."""
  or: [CategoriesToProgramSetFilter!]

  """Negates the expression."""
  not: CategoriesToProgramSetFilter
}

"""A connection to a list of `CategoriesToProgramSet` values."""
type CategoriesToProgramSetsConnection {
  """A list of `CategoriesToProgramSet` objects."""
  nodes: [CategoriesToProgramSet!]!

  """
  A list of edges which contains the `CategoriesToProgramSet` and cursor to aid in pagination.
  """
  edges: [CategoriesToProgramSetsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CategoriesToProgramSet` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CategoriesToProgramSet` edge in the connection."""
type CategoriesToProgramSetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CategoriesToProgramSet` at the end of the edge."""
  node: CategoriesToProgramSet!
}

"""Methods to use when ordering `CategoriesToProgramSet`."""
enum CategoriesToProgramSetsOrderBy {
  NATURAL
  PROGRAM_SET_CORE_ID_ASC
  PROGRAM_SET_CORE_ID_DESC
  CATEGORY_SOPHORA_ID_ASC
  CATEGORY_SOPHORA_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Concept implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  itemId: Int!
  conceptSource: String!
  data: JSON
  lastUpdatedAt: Datetime!

  """Reads a single `Item` that is related to this `Concept`."""
  item: Item
}

"""
A condition to be used against `Concept` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ConceptCondition {
  """Checks for equality with the object’s `itemId` field."""
  itemId: Int

  """Checks for equality with the object’s `conceptSource` field."""
  conceptSource: String

  """Checks for equality with the object’s `data` field."""
  data: JSON

  """Checks for equality with the object’s `lastUpdatedAt` field."""
  lastUpdatedAt: Datetime
}

"""
A filter to be used against `Concept` object types. All fields are combined with a logical ‘and.’
"""
input ConceptFilter {
  """Filter by the object’s `itemId` field."""
  itemId: IntFilter

  """Filter by the object’s `conceptSource` field."""
  conceptSource: StringFilter

  """Filter by the object’s `data` field."""
  data: JSONFilter

  """Filter by the object’s `lastUpdatedAt` field."""
  lastUpdatedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [ConceptFilter!]

  """Checks for any expressions in this list."""
  or: [ConceptFilter!]

  """Negates the expression."""
  not: ConceptFilter
}

"""A connection to a list of `Concept` values."""
type ConceptsConnection {
  """A list of `Concept` objects."""
  nodes: [Concept!]!

  """
  A list of edges which contains the `Concept` and cursor to aid in pagination.
  """
  edges: [ConceptsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Concept` you could get from the connection."""
  totalCount: Int!
}

"""A `Concept` edge in the connection."""
type ConceptsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Concept` at the end of the edge."""
  node: Concept!
}

"""Methods to use when ordering `Concept`."""
enum ConceptsOrderBy {
  NATURAL
  ITEM_ID_ASC
  ITEM_ID_DESC
  CONCEPT_SOURCE_ASC
  CONCEPT_SOURCE_DESC
  DATA_ASC
  DATA_DESC
  LAST_UPDATED_AT_ASC
  LAST_UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Config implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  key: String!
  value: JSON
  updatedAt: Datetime
  updatedBy: String
}

"""
A condition to be used against `Config` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ConfigCondition {
  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `value` field."""
  value: JSON

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String
}

"""
A filter to be used against `Config` object types. All fields are combined with a logical ‘and.’
"""
input ConfigFilter {
  """Filter by the object’s `key` field."""
  key: StringFilter

  """Filter by the object’s `value` field."""
  value: JSONFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: StringFilter

  """Checks for all expressions in this list."""
  and: [ConfigFilter!]

  """Checks for any expressions in this list."""
  or: [ConfigFilter!]

  """Negates the expression."""
  not: ConfigFilter
}

"""A connection to a list of `Config` values."""
type ConfigsConnection {
  """A list of `Config` objects."""
  nodes: [Config!]!

  """
  A list of edges which contains the `Config` and cursor to aid in pagination.
  """
  edges: [ConfigsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Config` you could get from the connection."""
  totalCount: Int!
}

"""A `Config` edge in the connection."""
type ConfigsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Config` at the end of the edge."""
  node: Config!
}

"""Methods to use when ordering `Config`."""
enum ConfigsOrderBy {
  NATURAL
  KEY_ASC
  KEY_DESC
  VALUE_ASC
  VALUE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

interface CoreTeaser {
  id: ID!
  title: String!
  coreId: String @deprecated(reason: "only for internal debugging")
  coreDocument: JSON @deprecated(reason: "only for internal debugging")
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
 Filter by DateTime in ISO 8601 format. Also supports the `now` keyword which
represents the current server time. Now also supports an optional ISO‐8601
format period which is added to the current time. Example:
`now(P3Y6M4DT12H30M5S)` or `now(-P3Y6M4DT12H30M5S)` 
"""
input DateFilterB {
  """ A filter that matches if the value of the property is equal to the specified value 
  """
  eq: DateTime

  """ A filter that matches if the value of the property not equal to the specified value 
  """
  ne: DateTime

  """ A filter that matches if the value of the property is one of the values in the specified list 
  """
  in: [DateTime]

  """ A filter that matches if the value of the property is greater than the specified value 
  """
  gt: DateTime

  """ A filter that matches if the value of the property is greater than or equal to the specified value 
  """
  gte: DateTime

  """ A filter that matches if the value of the property is less than the specified value 
  """
  lt: DateTime

  """ A filter that matches if the value of the property is less than or equal to the specified value 
  """
  lte: DateTime
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

scalar DateTime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""A `DebugShowGroupsRecord` edge in the connection."""
type DebugShowGroupEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DebugShowGroupsRecord` at the end of the edge."""
  node: DebugShowGroupsRecord!
}

"""A connection to a list of `DebugShowGroupsRecord` values."""
type DebugShowGroupsConnection {
  """A list of `DebugShowGroupsRecord` objects."""
  nodes: [DebugShowGroupsRecord!]!

  """
  A list of edges which contains the `DebugShowGroupsRecord` and cursor to aid in pagination.
  """
  edges: [DebugShowGroupEdge!]!

  """
  The count of *all* `DebugShowGroupsRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""The return type of our `debugShowGroups` query."""
type DebugShowGroupsRecord {
  rowId: Int
  coreId: String
  publishDate: Datetime
  modifiedPublishDate: Datetime
  title: String
  titleWithoutNumber: String
  groupNumber: Int
  maxGroupNumber: Int
  seasonNumber: Int
  groupId: Int
  coreType: String
  externalId: String
}

""" Input parameter for deleting history entries by their referenced item 
"""
input DeleteHistoryEntryByItemInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The item to be used for finding the history entry to be deleted. """
  item: ItemCreateInput!
}

""" Input parameter for delete mutations """
input DeleteInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The ID of the object to be deleted. """
  id: ID!
}

""" The payload returned from delete mutations. """
type DeletePayload {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String
}

"""All input for the `depublishExpiredItems` mutation."""
input DepublishExpiredItemsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `depublishExpiredItems` mutation."""
type DepublishExpiredItemsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  bigInt: BigInt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

enum DurationVariant {
  SECONDS
  ISO8601
}

type EditorialCategoriesConnection {
  nodes: [EditorialCategory!]

  """
  A list of edges which contains the `EditorialCategory` and cursor to aid in pagination.
  """
  edges: [EditorialCategoriesEdge!]!
  pageInfo: PageInfo
  totalCount: Int!
  title: String
  tracking: JSON
  _links: JSON @deprecated(reason: "only for old / hal-json queries")
  _raw: JSON @deprecated(reason: "only for internal debugging")
}

"""A `EditorialCategory` edge in the connection."""
type EditorialCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EditorialCategory` at the end of the edge."""
  node: EditorialCategory!
}

"""Methods to use when ordering `EditorialCategory`."""
enum EditorialCategoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  IMAGE_ASC
  IMAGE_DESC
  SOPHORA_ID_ASC
  SOPHORA_ID_DESC
  ORDER_ASC
  ORDER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type EditorialCategory implements Node & Teaser {
  nodeId: ID! @deprecated(reason: "only for internal use")
  rowId: String!
  title: String!
  image: ImageType
  sophoraId: String
  order: Int

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItemFilter
  ): ItemsConnection!

  """
  Reads and enables pagination through a set of `CategoriesToProgramSet`.
  """
  categoriesToProgramSetsByCategorySophoraId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CategoriesToProgramSet`."""
    orderBy: [CategoriesToProgramSetsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoriesToProgramSetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CategoriesToProgramSetFilter
  ): CategoriesToProgramSetsConnection!

  """
  Reads and enables pagination through a set of `CategoriesToProgramSet`.
  """
  categoriesToProgramSetsByCategorySophoraIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CategoriesToProgramSet`."""
    orderBy: [CategoriesToProgramSetsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoriesToProgramSetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CategoriesToProgramSetFilter
  ): [CategoriesToProgramSet!]!

  """Reads and enables pagination through a set of `Item`."""
  recentItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItemFilter
  ): ItemsConnection!

  """Reads and enables pagination through a set of `Item`."""
  recentItemsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItemFilter
  ): [Item!]

  """Reads and enables pagination through a set of `ProgramSet`."""
  programSets(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProgramSet`."""
    orderBy: [ProgramSetsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProgramSetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProgramSetFilter
  ): EditorialCategoryProgramSetsManyToManyConnection!

  """Reads and enables pagination through a set of `ProgramSet`."""
  programSetsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ProgramSet`."""
    orderBy: [ProgramSetsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProgramSetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProgramSetFilter
  ): [ProgramSet!]!
  sharingUrl: URL
  path: String
  url(variant: UrlVariant): String
  tracking: JSON
  _links: JSON @deprecated(reason: "only for old / hal-json queries")
  id: ID!
  synopsis: String
  editorialDescription: String @deprecated(reason: "experimental")
  numberOfElements: Int
  _raw: JSON @deprecated(reason: "only for internal debugging")
}

"""
A condition to be used against `EditorialCategory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EditorialCategoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `image` field."""
  image: ImageTypeInput

  """Checks for equality with the object’s `sophoraId` field."""
  sophoraId: String

  """Checks for equality with the object’s `order` field."""
  order: Int
}

"""
A filter to be used against `EditorialCategory` object types. All fields are combined with a logical ‘and.’
"""
input EditorialCategoryFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `sophoraId` field."""
  sophoraId: StringFilter

  """Filter by the object’s `order` field."""
  order: IntFilter

  """Filter by the object’s `image` field."""
  image: ImageTypeFilter

  """Checks for all expressions in this list."""
  and: [EditorialCategoryFilter!]

  """Checks for any expressions in this list."""
  or: [EditorialCategoryFilter!]

  """Negates the expression."""
  not: EditorialCategoryFilter
}

"""
A connection to a list of `ProgramSet` values, with data from `CategoriesToProgramSet`.
"""
type EditorialCategoryProgramSetsManyToManyConnection {
  """A list of `ProgramSet` objects."""
  nodes: [ProgramSet!]!

  """
  A list of edges which contains the `ProgramSet`, info from the
  `CategoriesToProgramSet`, and the cursor to aid in pagination.
  """
  edges: [EditorialCategoryProgramSetsManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProgramSet` you could get from the connection."""
  totalCount: Int!
}

"""
A `ProgramSet` edge in the connection, with data from `CategoriesToProgramSet`.
"""
type EditorialCategoryProgramSetsManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProgramSet` at the end of the edge."""
  node: ProgramSet!
}

type EditorialCollection implements Node & Teaser {
  nodeId: ID! @deprecated(reason: "only for internal use")
  sophoraId: String!
  title: String!
  image: ImageType
  broadcastDuration: Int
  numberOfElements: Int
  synopsis: String
  coremediaId: String
  rowId: ID!
  sharingUrl: URL
  path: String
  url(variant: UrlVariant): String
  tracking: JSON
  _links: JSON @deprecated(reason: "only for old / hal-json queries")
  id: ID!
  editorialDescription: String @deprecated(reason: "experimental")
  summary: String
  _raw: JSON @deprecated(reason: "only for internal debugging")
  items(offset: Int, limit: Int): ItemsConnection!
}

"""
A condition to be used against `EditorialCollection` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input EditorialCollectionCondition {
  """Checks for equality with the object’s `sophoraId` field."""
  sophoraId: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `image` field."""
  image: ImageTypeInput

  """Checks for equality with the object’s `broadcastDuration` field."""
  broadcastDuration: Int

  """Checks for equality with the object’s `numberOfElements` field."""
  numberOfElements: Int

  """Checks for equality with the object’s `synopsis` field."""
  synopsis: String

  """Checks for equality with the object’s `coremediaId` field."""
  coremediaId: String
}

"""
A filter to be used against `EditorialCollection` object types. All fields are combined with a logical ‘and.’
"""
input EditorialCollectionFilter {
  """Filter by the object’s `sophoraId` field."""
  sophoraId: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `broadcastDuration` field."""
  broadcastDuration: IntFilter

  """Filter by the object’s `numberOfElements` field."""
  numberOfElements: IntFilter

  """Filter by the object’s `synopsis` field."""
  synopsis: StringFilter

  """Filter by the object’s `coremediaId` field."""
  coremediaId: StringFilter

  """Filter by the object’s `image` field."""
  image: ImageTypeFilter

  """Checks for all expressions in this list."""
  and: [EditorialCollectionFilter!]

  """Checks for any expressions in this list."""
  or: [EditorialCollectionFilter!]

  """Negates the expression."""
  not: EditorialCollectionFilter
}

type EditorialCollectionsConnection {
  nodes: [EditorialCollection!]

  """
  A list of edges which contains the `EditorialCollection` and cursor to aid in pagination.
  """
  edges: [EditorialCollectionsEdge!]!
  pageInfo: PageInfo
  totalCount: Int!
  _links: JSON @deprecated(reason: "only for old / hal-json queries")
  _raw: JSON @deprecated(reason: "only for internal debugging")
}

type EditorialCollectionSection implements Section {
  id: ID!
  title: String
  key: String
  type: String
  layout: JSON
  tracking: JSON
  nodes(limit: Int, offset: Int = 0): [EditorialCollection!]
  nodeType: String @deprecated(reason: "only for backwards compatibility")
  nodeTypes: [TeaserTypeATG!]
  teaserType: String @deprecated(reason: "WIP")
  teaserTypes: [String!] @deprecated(reason: "WIP")
  editorialCollections: [EditorialCollection!] @deprecated(reason: "only for backwards compatibility")
}

"""A `EditorialCollection` edge in the connection."""
type EditorialCollectionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EditorialCollection` at the end of the edge."""
  node: EditorialCollection!
}

"""Methods to use when ordering `EditorialCollection`."""
enum EditorialCollectionsOrderBy {
  NATURAL
  SOPHORA_ID_ASC
  SOPHORA_ID_DESC
  TITLE_ASC
  TITLE_DESC
  IMAGE_ASC
  IMAGE_DESC
  BROADCAST_DURATION_ASC
  BROADCAST_DURATION_DESC
  NUMBER_OF_ELEMENTS_ASC
  NUMBER_OF_ELEMENTS_DESC
  SYNOPSIS_ASC
  SYNOPSIS_DESC
  COREMEDIA_ID_ASC
  COREMEDIA_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

""" Describes an single end user (de: Endnutzer, en: Enduser) """
type EndUser implements EndUserInterface {
  id: ID!
  baseIdPrefix: String!

  """ Bookmarks of a single user (de: Lesezeichen, en: Bookmarks) """
  bookmarks: BookmarkListInterface

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ History of a single user (de: Verlauf, en: History) """
  history(after: String, first: Int, before: String, last: Int, filter: HistoryEntryFilterB, orderBy: HistoryEntrySortOrder): HistoryEntryConnection

  """ local id of the user - used for peach tracking before the user signed up () 
  """
  localId: String

  """ ID corresponding in the login service (de: Anmeldungskennung, en: Login identifier) 
  """
  loginId: String

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """ Playlists of single user (de: Playlists, en: Playlists) """
  playlists(after: String, first: Int, before: String, last: Int, filter: PlaylistFilterB, orderBy: PlaylistSortOrder): PlaylistConnection

  """ All the profile settings of an user (de: Einstellungen, en: Properties) 
  """
  properties(after: String, first: Int, before: String, last: Int, filter: PropertyFilterB, orderBy: PropertySortOrder): PropertyConnection

  """ Queue of the user (de: Warteschlange, en: Warteschlange) """
  queue: QueueInterface

  """ All Subscriptions of a single user (de: Abos, en: Subscriptions) """
  subscriptions: SubscriptionListInterface

  """ initial sync after first login was completed successfully () """
  syncSuccessful: Boolean
}

""" This is a generated connection for EndUser """
type EndUserConnection {
  count: Int
  edges: [EndUserEdge]
  nodes: [EndUserInterface]
  pageInfo: PageInfo!
}

input EndUserConnectionFilterB {
  """ A filter that matches empty connections. """
  empty: BooleanFilterB

  """ A filter that matches if the specified ID is part of the connection. """
  contains: ID
}

""" Input parameter for the create mutation of EndUser """
input EndUserCreateInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The type of the created object. Defaults to EndUser """
  type: String = "EndUser"

  """ local id of the user - used for peach tracking before the user signed up () 
  """
  localId: String

  """ ID corresponding in the login service (de: Anmeldungskennung, en: Login identifier) 
  """
  loginId: String

  """ initial sync after first login was completed successfully () """
  syncSuccessful: Boolean
}

"""  This is a generated edge for EndUser """
type EndUserEdge {
  cursor: String!
  node: EndUserInterface
}

input EndUserFilterB {
  """ Filter by values of property createdAt """
  createdAt: DateFilterB

  """ Filter by values of property localId """
  localId: StringFilterB

  """ Filter by values of property loginId """
  loginId: StringFilterB

  """ Filter by values of property modifiedAt """
  modifiedAt: DateFilterB

  """ Filter by values of property syncSuccessful """
  syncSuccessful: BooleanFilterB
}

""" Describes an single end user (de: Endnutzer, en: Enduser) """
interface EndUserInterface {
  id: ID!
  baseIdPrefix: String!

  """ Bookmarks of a single user (de: Lesezeichen, en: Bookmarks) """
  bookmarks: BookmarkListInterface

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ History of a single user (de: Verlauf, en: History) """
  history(after: String, first: Int, before: String, last: Int, filter: HistoryEntryFilterB, orderBy: HistoryEntrySortOrder): HistoryEntryConnection

  """ local id of the user - used for peach tracking before the user signed up () 
  """
  localId: String

  """ ID corresponding in the login service (de: Anmeldungskennung, en: Login identifier) 
  """
  loginId: String

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """ Playlists of single user (de: Playlists, en: Playlists) """
  playlists(after: String, first: Int, before: String, last: Int, filter: PlaylistFilterB, orderBy: PlaylistSortOrder): PlaylistConnection

  """ All the profile settings of an user (de: Einstellungen, en: Properties) 
  """
  properties(after: String, first: Int, before: String, last: Int, filter: PropertyFilterB, orderBy: PropertySortOrder): PropertyConnection

  """ Queue of the user (de: Warteschlange, en: Warteschlange) """
  queue: QueueInterface

  """ All Subscriptions of a single user (de: Abos, en: Subscriptions) """
  subscriptions: SubscriptionListInterface

  """ initial sync after first login was completed successfully () """
  syncSuccessful: Boolean
}

""" The payload returned from mutations of EndUser. """
type EndUserPayload {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The mutated object. """
  changedEndUser: EndUser
}

input EndUserRelationFilterB {
  """ A filter that matches when the relation points to the object with the specified ID. 
  """
  id: IDFilterB

  """ A filter that matches when the relation exists. """
  exists: BooleanFilterB
}

input EndUserRemoveAllListInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String
  endUser: ID!
}

enum EndUserSortOrder {
  CREATEDAT_ASC
  CREATEDAT_DESC
  LOCALID_ASC
  LOCALID_DESC
  LOGINID_ASC
  LOGINID_DESC
  MODIFIEDAT_ASC
  MODIFIEDAT_DESC
  SYNCSUCCESSFUL_ASC
  SYNCSUCCESSFUL_DESC
}

input EndUserSyncInput {
  user: EndUserCreateInput!
  bookmarks: [BookmarkCreateInput]
  playlists: [PlaylistCreateInput]
  queuedItems: [ItemCreateInput]
  programSetSubscriptions: [ProgramSetSubscriptionCreateInput]
  historyEntries: [HistoryEntryCreateInput]
}

""" Input parameter for the update mutation of EndUser """
input EndUserUpdateInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The ID of the updated object. """
  id: ID!

  """ local id of the user - used for peach tracking before the user signed up () 
  """
  localId: String

  """ ID corresponding in the login service (de: Anmeldungskennung, en: Login identifier) 
  """
  loginId: String

  """ initial sync after first login was completed successfully () """
  syncSuccessful: Boolean
}

type EventLivestream implements Teaser & CoreTeaser {
  id: ID!
  coreId: String
  coreType: ItemType! @deprecated(reason: "use itemType")
  itemType: ItemType!
  rowId: Int!
  externalIds: [String]
  title: String!
  image: ImageType
  publishDate: Datetime!
  broadcastStart: Datetime!
  duration(variant: DurationVariant): Int
  programSet: ProgramSet
  editorialDescription: String @deprecated(reason: "experimental")

  """same as summary"""
  synopsis: String

  """same as synopsis"""
  summary: String

  """longer description / show notes"""
  description: HTML
  audios: [AssetType!]
  audioList: [AudioBinary!]
  sharingUrl: URL
  url(variant: UrlVariant): String
  path: String
  tracking: JSON
  coreDocument: JSON
  core(filter: String, key: String): JSON
  numberOfElements: Int @deprecated(reason: "is always null")
  _links: JSON @deprecated(reason: "only for old / hal-json queries")
  _raw: JSON @deprecated(reason: "only for internal debugging")
}

type FilterCompilationSection implements Section {
  id: ID!
  title: String
  tracking: JSON
  meta: JSON
  key: String @deprecated(reason: "only for internal use")
  type: String
  layout: JSON
  nodeType: String @deprecated(reason: "only for backwards compatibility")
  nodeTypes: [TeaserTypeATG!]
  teaserType: String @deprecated(reason: "WIP")
  teaserTypes: [String!] @deprecated(reason: "WIP")
  nodes(limit: Int, offset: Int = 0, source: SourceSystem): [Teaser!]
  _items: JSON @deprecated(reason: "only for internal stiching/debugging")
  _raw: JSON @deprecated(reason: "only for internal debugging")
}

input FloatFilterB {
  """ A filter that matches if the value of the property is equal to the specified value 
  """
  eq: Float

  """ A filter that matches if the value of the property not equal to the specified value 
  """
  ne: Float

  """ A filter that matches if the value of the property is one of the values in the specified list 
  """
  in: [Float]

  """ A filter that matches if the value of the property is greater than the specified value 
  """
  gt: Float

  """ A filter that matches if the value of the property is greater than or equal to the specified value 
  """
  gte: Float

  """ A filter that matches if the value of the property is less than the specified value 
  """
  lt: Float

  """ A filter that matches if the value of the property is less than or equal to the specified value 
  """
  lte: Float
}

type Grouping implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  rowId: String!
  programsetId: Int
  title: String!
  itemLabel: String!
  type: Grouptype
  count: Int
  seasonNumber: Int
  lastModified: Datetime!
  coreId: String
  coreDocument: JSON
  showId: String

  """Reads a single `ProgramSet` that is related to this `Grouping`."""
  programset: ProgramSet

  """Reads a single `ProgramSet` that is related to this `Grouping`."""
  show: ProgramSet

  """Reads and enables pagination through a set of `Item`."""
  itemsByGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItemFilter
  ): ItemsConnection!
}

"""
A condition to be used against `Grouping` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GroupingCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `programsetId` field."""
  programsetId: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `itemLabel` field."""
  itemLabel: String

  """Checks for equality with the object’s `type` field."""
  type: Grouptype

  """Checks for equality with the object’s `count` field."""
  count: Int

  """Checks for equality with the object’s `seasonNumber` field."""
  seasonNumber: Int

  """Checks for equality with the object’s `lastModified` field."""
  lastModified: Datetime

  """Checks for equality with the object’s `coreId` field."""
  coreId: String

  """Checks for equality with the object’s `coreDocument` field."""
  coreDocument: JSON

  """Checks for equality with the object’s `showId` field."""
  showId: String
}

"""
A filter to be used against `Grouping` object types. All fields are combined with a logical ‘and.’
"""
input GroupingFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `programsetId` field."""
  programsetId: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `itemLabel` field."""
  itemLabel: StringFilter

  """Filter by the object’s `type` field."""
  type: GrouptypeFilter

  """Filter by the object’s `count` field."""
  count: IntFilter

  """Filter by the object’s `seasonNumber` field."""
  seasonNumber: IntFilter

  """Filter by the object’s `lastModified` field."""
  lastModified: DatetimeFilter

  """Filter by the object’s `coreId` field."""
  coreId: StringFilter

  """Filter by the object’s `coreDocument` field."""
  coreDocument: JSONFilter

  """Filter by the object’s `showId` field."""
  showId: StringFilter

  """Checks for all expressions in this list."""
  and: [GroupingFilter!]

  """Checks for any expressions in this list."""
  or: [GroupingFilter!]

  """Negates the expression."""
  not: GroupingFilter
}

"""A connection to a list of `Grouping` values."""
type GroupingsConnection {
  """A list of `Grouping` objects."""
  nodes: [Grouping!]!

  """
  A list of edges which contains the `Grouping` and cursor to aid in pagination.
  """
  edges: [GroupingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Grouping` you could get from the connection."""
  totalCount: Int!
}

"""A `Grouping` edge in the connection."""
type GroupingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Grouping` at the end of the edge."""
  node: Grouping!
}

"""Methods to use when ordering `Grouping`."""
enum GroupingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PROGRAMSET_ID_ASC
  PROGRAMSET_ID_DESC
  TITLE_ASC
  TITLE_DESC
  ITEM_LABEL_ASC
  ITEM_LABEL_DESC
  TYPE_ASC
  TYPE_DESC
  COUNT_ASC
  COUNT_DESC
  SEASON_NUMBER_ASC
  SEASON_NUMBER_DESC
  LAST_MODIFIED_ASC
  LAST_MODIFIED_DESC
  CORE_ID_ASC
  CORE_ID_DESC
  CORE_DOCUMENT_ASC
  CORE_DOCUMENT_DESC
  SHOW_ID_ASC
  SHOW_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum Grouptype {
  SERIES
  SEASON
  MULTIPART
}

"""
A filter to be used against Grouptype fields. All fields are combined with a logical ‘and.’
"""
input GrouptypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Grouptype

  """Not equal to the specified value."""
  notEqualTo: Grouptype

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Grouptype

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Grouptype

  """Included in the specified list."""
  in: [Grouptype!]

  """Not included in the specified list."""
  notIn: [Grouptype!]

  """Less than the specified value."""
  lessThan: Grouptype

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Grouptype

  """Greater than the specified value."""
  greaterThan: Grouptype

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Grouptype
}

""" Describes a single history entry. (de: Eintrag im Verlauf, en: Entry of history) 
"""
type HistoryEntry implements HistoryEntryInterface {
  id: ID!
  baseIdPrefix: String!

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ An associated item. (de: Item, en: item) """
  item: Item

  """ When the user listened the clip for the last time. (de: zuletzt gehört, en: last listened at) 
  """
  lastListenedAt: DateTime

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """ The progress of the user in the content in seconds (de: Fortschritt, en: Progress) 
  """
  progress: Float

  """ Associates Subscriptions, History items, Playlists, the Queue and User Properties with a user. (de: User, en: user) 
  """
  user: EndUserInterface
}

""" This is a generated connection for HistoryEntry """
type HistoryEntryConnection {
  count: Int
  edges: [HistoryEntryEdge]
  nodes: [HistoryEntryInterface]
  pageInfo: PageInfo!
}

input HistoryEntryConnectionFilterB {
  """ A filter that matches empty connections. """
  empty: BooleanFilterB

  """ A filter that matches if the specified ID is part of the connection. """
  contains: ID
}

""" Input parameter for the create mutation of HistoryEntry """
input HistoryEntryCreateInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The type of the created object. Defaults to HistoryEntry """
  type: String = "HistoryEntry"

  """ An associated item. (de: Item, en: item) """
  item: ItemCreateInput!

  """ When the user listened the clip for the last time. (de: zuletzt gehört, en: last listened at) 
  """
  lastListenedAt: DateTime

  """ The progress of the user in the content in seconds (de: Fortschritt, en: Progress) 
  """
  progress: Float
}

"""  This is a generated edge for HistoryEntry """
type HistoryEntryEdge {
  cursor: String!
  node: HistoryEntryInterface
}

input HistoryEntryFilterB {
  """ Filter by values of property createdAt """
  createdAt: DateFilterB

  """ Filter by values of property lastListenedAt """
  lastListenedAt: DateFilterB

  """ Filter by values of property modifiedAt """
  modifiedAt: DateFilterB

  """ Filter by values of property progress """
  progress: FloatFilterB

  """ Filter by values of property user """
  user: EndUserRelationFilterB
}

""" Describes a single history entry. (de: Eintrag im Verlauf, en: Entry of history) 
"""
interface HistoryEntryInterface {
  id: ID!
  baseIdPrefix: String!

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ An associated item. (de: Item, en: item) """
  item: Item

  """ When the user listened the clip for the last time. (de: zuletzt gehört, en: last listened at) 
  """
  lastListenedAt: DateTime

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """ The progress of the user in the content in seconds (de: Fortschritt, en: Progress) 
  """
  progress: Float

  """ Associates Subscriptions, History items, Playlists, the Queue and User Properties with a user. (de: User, en: user) 
  """
  user: EndUserInterface
}

""" The payload returned from mutations of HistoryEntry. """
type HistoryEntryPayload {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The mutated object. """
  changedHistoryEntry: HistoryEntry
}

input HistoryEntryRelationFilterB {
  """ A filter that matches when the relation points to the object with the specified ID. 
  """
  id: IDFilterB

  """ A filter that matches when the relation exists. """
  exists: BooleanFilterB
}

input HistoryEntryRemoveAllListInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String
  historyEntry: ID!
}

enum HistoryEntrySortOrder {
  CREATEDAT_ASC
  CREATEDAT_DESC
  ITEM_ID_ASC
  ITEM_ID_DESC
  LASTLISTENEDAT_ASC
  LASTLISTENEDAT_DESC
  MODIFIEDAT_ASC
  MODIFIEDAT_DESC
  PROGRESS_ASC
  PROGRESS_DESC
}

""" Input parameter for the update mutation of HistoryEntry """
input HistoryEntryUpdateInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The ID of the updated object. """
  id: ID!

  """ An associated item. (de: Item, en: item) """
  item: ItemCreateInput

  """ When the user listened the clip for the last time. (de: zuletzt gehört, en: last listened at) 
  """
  lastListenedAt: DateTime

  """ The progress of the user in the content in seconds (de: Fortschritt, en: Progress) 
  """
  progress: Float
}

scalar HTML

input IDFilterB {
  """ A filter that matches if the value of the property is equal to the specified value 
  """
  eq: ID

  """ A filter that matches if the value of the property not equal to the specified value 
  """
  ne: ID

  """ A filter that matches if the value of the property is one of the values in the specified list 
  """
  in: [ID]
}

type Image implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  rowId: String!
  coreDocument: JSON
  title: String
  producerName: String
  imageBinaryId: String
}

type ImageBinary implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  rowId: String!
  coreDocument: JSON
  fileLocation: String
  mediaType: String
  width: Int
  height: Int
  aspectRatio: String
}

type ImageCollection implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  rowId: String!
  coreDocument: JSON
  imageIds: [String]
}

type ImagesCollectionsBinariesView {
  imageCollectionId: String
  imageId: String
  title: String
  producerName: String
  imageBinaryId: String
  aspectRatio: String
  height: Int
  width: Int
  mediaType: String
  fileLocation: String
  url: String!
}

"""
A condition to be used against `ImagesCollectionsBinariesView` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ImagesCollectionsBinariesViewCondition {
  """Checks for equality with the object’s `imageCollectionId` field."""
  imageCollectionId: String

  """Checks for equality with the object’s `imageId` field."""
  imageId: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `producerName` field."""
  producerName: String

  """Checks for equality with the object’s `imageBinaryId` field."""
  imageBinaryId: String

  """Checks for equality with the object’s `aspectRatio` field."""
  aspectRatio: String

  """Checks for equality with the object’s `height` field."""
  height: Int

  """Checks for equality with the object’s `width` field."""
  width: Int

  """Checks for equality with the object’s `mediaType` field."""
  mediaType: String

  """Checks for equality with the object’s `fileLocation` field."""
  fileLocation: String
}

"""
A filter to be used against `ImagesCollectionsBinariesView` object types. All fields are combined with a logical ‘and.’
"""
input ImagesCollectionsBinariesViewFilter {
  """Filter by the object’s `imageCollectionId` field."""
  imageCollectionId: StringFilter

  """Filter by the object’s `imageId` field."""
  imageId: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `producerName` field."""
  producerName: StringFilter

  """Filter by the object’s `imageBinaryId` field."""
  imageBinaryId: StringFilter

  """Filter by the object’s `aspectRatio` field."""
  aspectRatio: StringFilter

  """Filter by the object’s `height` field."""
  height: IntFilter

  """Filter by the object’s `width` field."""
  width: IntFilter

  """Filter by the object’s `mediaType` field."""
  mediaType: StringFilter

  """Filter by the object’s `fileLocation` field."""
  fileLocation: StringFilter

  """Checks for all expressions in this list."""
  and: [ImagesCollectionsBinariesViewFilter!]

  """Checks for any expressions in this list."""
  or: [ImagesCollectionsBinariesViewFilter!]

  """Negates the expression."""
  not: ImagesCollectionsBinariesViewFilter
}

"""A connection to a list of `ImagesCollectionsBinariesView` values."""
type ImagesCollectionsBinariesViewsConnection {
  """A list of `ImagesCollectionsBinariesView` objects."""
  nodes: [ImagesCollectionsBinariesView!]!

  """
  A list of edges which contains the `ImagesCollectionsBinariesView` and cursor to aid in pagination.
  """
  edges: [ImagesCollectionsBinariesViewsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ImagesCollectionsBinariesView` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ImagesCollectionsBinariesView` edge in the connection."""
type ImagesCollectionsBinariesViewsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ImagesCollectionsBinariesView` at the end of the edge."""
  node: ImagesCollectionsBinariesView!
}

"""Methods to use when ordering `ImagesCollectionsBinariesView`."""
enum ImagesCollectionsBinariesViewsOrderBy {
  NATURAL
  IMAGE_COLLECTION_ID_ASC
  IMAGE_COLLECTION_ID_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  TITLE_ASC
  TITLE_DESC
  PRODUCER_NAME_ASC
  PRODUCER_NAME_DESC
  IMAGE_BINARY_ID_ASC
  IMAGE_BINARY_ID_DESC
  ASPECT_RATIO_ASC
  ASPECT_RATIO_DESC
  HEIGHT_ASC
  HEIGHT_DESC
  WIDTH_ASC
  WIDTH_DESC
  MEDIA_TYPE_ASC
  MEDIA_TYPE_DESC
  FILE_LOCATION_ASC
  FILE_LOCATION_DESC
}

type ImageType {
  url: String
  url1X1: String
  description: String
  attribution: String
}

"""
A filter to be used against `ImageType` object types. All fields are combined with a logical ‘and.’
"""
input ImageTypeFilter {
  """Filter by the object’s `url` field."""
  url: StringFilter

  """Filter by the object’s `url1X1` field."""
  url1X1: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `attribution` field."""
  attribution: StringFilter

  """Checks for all expressions in this list."""
  and: [ImageTypeFilter!]

  """Checks for any expressions in this list."""
  or: [ImageTypeFilter!]

  """Negates the expression."""
  not: ImageTypeFilter
}

"""An input for mutations affecting `ImageType`"""
input ImageTypeInput {
  url: String
  url1X1: String
  description: String
  attribution: String
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

input IntFilterB {
  """ A filter that matches if the value of the property is equal to the specified value 
  """
  eq: Int

  """ A filter that matches if the value of the property not equal to the specified value 
  """
  ne: Int

  """ A filter that matches if the value of the property is one of the values in the specified list 
  """
  in: [Int]

  """ A filter that matches if the value of the property is greater than the specified value 
  """
  gt: Int

  """ A filter that matches if the value of the property is greater than or equal to the specified value 
  """
  gte: Int

  """ A filter that matches if the value of the property is less than the specified value 
  """
  lt: Int

  """ A filter that matches if the value of the property is less than or equal to the specified value 
  """
  lte: Int
}

type Item implements Node & Teaser & CoreTeaser {
  rowId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  backendDocumentHash: String @deprecated(reason: "out of life")
  backendDocument: JSON @deprecated(reason: "out of life")
  publishDate: Datetime!
  codexPending: Boolean!
  feedDocument: JSON @deprecated(reason: "out of life")
  feedDocumentModifiedAt: BigInt @deprecated(reason: "out of life")
  isPublished: Boolean!
  depublishedAt: BigInt @deprecated(reason: "out of life")
  programSetId: Int
  title: String!
  titleWithoutNumber: String
  groupId: String
  episodeNumber: Int
  maxGroupNumber: Int
  codexLastPublished: BigInt
  externalIds: [String]
  image: ImageType
  editorialCategoryId: String @deprecated(reason: "out of life")
  coreId: String
  itemType: ItemType!
  coreDocument: JSON
  externalId: String
  imageCollectionId: String
  showId: String
  firstPublishDate: Datetime
  audioBinaryId: String
  status: Status

  """Reads a single `ProgramSet` that is related to this `Item`."""
  programSet: ProgramSet

  """Reads a single `Grouping` that is related to this `Item`."""
  group: Grouping

  """Reads a single `EditorialCategory` that is related to this `Item`."""
  editorialCategory: EditorialCategory

  """Reads and enables pagination through a set of `Concept`."""
  concepts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter
  ): ConceptsConnection!

  """Reads a single `Transcript` that is related to this `Item`."""
  transcript: Transcript

  """Reads and enables pagination through a set of `AudioBinary`."""
  audioList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [AudioBinary!]

  """Reads and enables pagination through a set of `EditorialCategory`."""
  editorialCategories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EditorialCategory`."""
    orderBy: [EditorialCategoriesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EditorialCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EditorialCategoryFilter
  ): EditorialCategoriesConnection!

  """Reads and enables pagination through a set of `EditorialCategory`."""
  editorialCategoriesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EditorialCategory`."""
    orderBy: [EditorialCategoriesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EditorialCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EditorialCategoryFilter
  ): [EditorialCategory!]
  hasCoreDocument: Boolean
  hasSyntheticRowId: Boolean

  """
  Reads and enables pagination through a set of `ImagesCollectionsBinariesView`.
  """
  images(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): ImagesCollectionsBinariesViewsConnection!

  """
  Reads and enables pagination through a set of `ImagesCollectionsBinariesView`.
  """
  imagesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [ImagesCollectionsBinariesView!]
  nextEpisode: Item
  coreType: ItemType! @deprecated(reason: "use itemType")
  titleClean: String
  synopsis: String
  summary: String
  description: HTML
  duration(variant: DurationVariant): Int
  groupNumber: Int @deprecated(reason: "use episodeNumber")
  grouping: JSON
  tracking: JSON
  _links: JSON @deprecated(reason: "only for backward compability")
  audios: [AssetType!]
  sharingUrl: URL
  url(variant: UrlVariant): String
  path: String
  tags: JSON @deprecated(reason: "use keywords instead")
  keywords: JSON
  subjects: JSON
  id: ID!
  _raw: JSON @deprecated(reason: "only for internal debugging")
  node: Teaser @deprecated(reason: "WIP")
  item: Item @deprecated(reason: "WIP")

  """ mediumTitle from Sophora MeCu API, used as `Kurzbeschreibung` only avaliable when item is requested via Board/Teaser
  """
  editorialDescription: String
  numberOfElements: Int @deprecated(reason: "is always null for items")
  publicationStartDateAndTime: Datetime @deprecated(reason: "only for old / hal-json queries")
  recommendations(variant: ItemRecVariant!): RecommendationsConnection
  core(filter: String, key: String): JSON
  feed(filter: String, key: String): JSON @deprecated(reason: "from meta export feed")
  backend(filter: String, key: String): JSON @deprecated(reason: "from old CoreMedia Backend API")
}

"""
A condition to be used against `Item` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `backendDocumentHash` field."""
  backendDocumentHash: String

  """Checks for equality with the object’s `backendDocument` field."""
  backendDocument: JSON

  """Checks for equality with the object’s `publishDate` field."""
  publishDate: Datetime

  """Checks for equality with the object’s `codexPending` field."""
  codexPending: Boolean

  """Checks for equality with the object’s `feedDocument` field."""
  feedDocument: JSON

  """Checks for equality with the object’s `feedDocumentModifiedAt` field."""
  feedDocumentModifiedAt: BigInt

  """Checks for equality with the object’s `isPublished` field."""
  isPublished: Boolean

  """Checks for equality with the object’s `depublishedAt` field."""
  depublishedAt: BigInt

  """Checks for equality with the object’s `programSetId` field."""
  programSetId: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `titleWithoutNumber` field."""
  titleWithoutNumber: String

  """Checks for equality with the object’s `groupId` field."""
  groupId: String

  """Checks for equality with the object’s `episodeNumber` field."""
  episodeNumber: Int

  """Checks for equality with the object’s `maxGroupNumber` field."""
  maxGroupNumber: Int

  """Checks for equality with the object’s `codexLastPublished` field."""
  codexLastPublished: BigInt

  """Checks for equality with the object’s `externalIds` field."""
  externalIds: [String]

  """Checks for equality with the object’s `image` field."""
  image: ImageTypeInput

  """Checks for equality with the object’s `editorialCategoryId` field."""
  editorialCategoryId: String

  """Checks for equality with the object’s `coreId` field."""
  coreId: String

  """Checks for equality with the object’s `itemType` field."""
  itemType: ItemType

  """Checks for equality with the object’s `coreDocument` field."""
  coreDocument: JSON

  """Checks for equality with the object’s `externalId` field."""
  externalId: String

  """Checks for equality with the object’s `imageCollectionId` field."""
  imageCollectionId: String

  """Checks for equality with the object’s `showId` field."""
  showId: String

  """Checks for equality with the object’s `firstPublishDate` field."""
  firstPublishDate: Datetime

  """Checks for equality with the object’s `audioBinaryId` field."""
  audioBinaryId: String

  """Checks for equality with the object’s `status` field."""
  status: Status
}

""" This is a generated connection for Item """
type ItemConnection {
  count: Int
  edges: [ItemEdge]
  nodes: [Item]
  pageInfo: PageInfo!
}

input ItemConnectionFilterB {
  """ Filter by values of property id """
  id: IntFilterB

  """ A filter that matches empty connections. """
  empty: BooleanFilterB
}

""" Input parameter for the create mutation of Item """
input ItemCreateInput {
  """ The type of the created object. Defaults to Item """
  type: String = "Item"

  """ Item ID (de: (CoreMedia-)ID der Entity, en: ID of the entity (in CoreMedia)) 
  """
  id: Int!
}

"""  This is a generated edge for Item """
type ItemEdge {
  cursor: String!
  node: Item
}

"""
A filter to be used against `Item` object types. All fields are combined with a logical ‘and.’
"""
input ItemFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `backendDocumentHash` field."""
  backendDocumentHash: StringFilter

  """Filter by the object’s `backendDocument` field."""
  backendDocument: JSONFilter

  """Filter by the object’s `publishDate` field."""
  publishDate: DatetimeFilter

  """Filter by the object’s `codexPending` field."""
  codexPending: BooleanFilter

  """Filter by the object’s `feedDocument` field."""
  feedDocument: JSONFilter

  """Filter by the object’s `feedDocumentModifiedAt` field."""
  feedDocumentModifiedAt: BigIntFilter

  """Filter by the object’s `isPublished` field."""
  isPublished: BooleanFilter

  """Filter by the object’s `depublishedAt` field."""
  depublishedAt: BigIntFilter

  """Filter by the object’s `programSetId` field."""
  programSetId: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `titleWithoutNumber` field."""
  titleWithoutNumber: StringFilter

  """Filter by the object’s `groupId` field."""
  groupId: StringFilter

  """Filter by the object’s `episodeNumber` field."""
  episodeNumber: IntFilter

  """Filter by the object’s `maxGroupNumber` field."""
  maxGroupNumber: IntFilter

  """Filter by the object’s `codexLastPublished` field."""
  codexLastPublished: BigIntFilter

  """Filter by the object’s `externalIds` field."""
  externalIds: StringListFilter

  """Filter by the object’s `editorialCategoryId` field."""
  editorialCategoryId: StringFilter

  """Filter by the object’s `coreId` field."""
  coreId: StringFilter

  """Filter by the object’s `itemType` field."""
  itemType: ItemTypeFilter

  """Filter by the object’s `coreDocument` field."""
  coreDocument: JSONFilter

  """Filter by the object’s `externalId` field."""
  externalId: StringFilter

  """Filter by the object’s `imageCollectionId` field."""
  imageCollectionId: StringFilter

  """Filter by the object’s `showId` field."""
  showId: StringFilter

  """Filter by the object’s `firstPublishDate` field."""
  firstPublishDate: DatetimeFilter

  """Filter by the object’s `audioBinaryId` field."""
  audioBinaryId: StringFilter

  """Filter by the object’s `status` field."""
  status: StatusFilter

  """Filter by the object’s `image` field."""
  image: ImageTypeFilter

  """Checks for all expressions in this list."""
  and: [ItemFilter!]

  """Checks for any expressions in this list."""
  or: [ItemFilter!]

  """Negates the expression."""
  not: ItemFilter
}

input ItemFilterB {
  """ Filter by values of property id """
  id: IntFilterB
}

enum ItemRecVariant {
  DETAIL_1
  DETAIL_2
  NOT_FOUND
}

input ItemRelationFilterB {
  """ Filter by values of property id """
  id: IntFilterB
}

"""A connection to a list of `Item` values."""
type ItemsConnection {
  """A list of `Item` objects."""
  nodes: [Item!]!

  """
  A list of edges which contains the `Item` and cursor to aid in pagination.
  """
  edges: [ItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Item` you could get from the connection."""
  totalCount: Int!
}

type ItemSection implements Section {
  id: ID!
  title: String
  key: String
  type: String
  layout: JSON
  tracking: JSON
  nodes(limit: Int, offset: Int = 0): [Item!]
  nodeType: String @deprecated(reason: "only for backwards compatibility")
  nodeTypes: [TeaserTypeATG!]
  teaserType: String @deprecated(reason: "WIP")
  teaserTypes: [String!] @deprecated(reason: "WIP")
  items: [Item!] @deprecated(reason: "only for backwards compatibility")
}

"""A `Item` edge in the connection."""
type ItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Item` at the end of the edge."""
  node: Item!
}

"""Methods to use when ordering `Item`."""
enum ItemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  BACKEND_DOCUMENT_HASH_ASC
  BACKEND_DOCUMENT_HASH_DESC
  BACKEND_DOCUMENT_ASC
  BACKEND_DOCUMENT_DESC
  PUBLISH_DATE_ASC
  PUBLISH_DATE_DESC
  CODEX_PENDING_ASC
  CODEX_PENDING_DESC
  FEED_DOCUMENT_ASC
  FEED_DOCUMENT_DESC
  FEED_DOCUMENT_MODIFIED_AT_ASC
  FEED_DOCUMENT_MODIFIED_AT_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  DEPUBLISHED_AT_ASC
  DEPUBLISHED_AT_DESC
  PROGRAM_SET_ID_ASC
  PROGRAM_SET_ID_DESC
  TITLE_ASC
  TITLE_DESC
  TITLE_WITHOUT_NUMBER_ASC
  TITLE_WITHOUT_NUMBER_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  EPISODE_NUMBER_ASC
  EPISODE_NUMBER_DESC
  MAX_GROUP_NUMBER_ASC
  MAX_GROUP_NUMBER_DESC
  CODEX_LAST_PUBLISHED_ASC
  CODEX_LAST_PUBLISHED_DESC
  EXTERNAL_IDS_ASC
  EXTERNAL_IDS_DESC
  IMAGE_ASC
  IMAGE_DESC
  EDITORIAL_CATEGORY_ID_ASC
  EDITORIAL_CATEGORY_ID_DESC
  CORE_ID_ASC
  CORE_ID_DESC
  ITEM_TYPE_ASC
  ITEM_TYPE_DESC
  CORE_DOCUMENT_ASC
  CORE_DOCUMENT_DESC
  EXTERNAL_ID_ASC
  EXTERNAL_ID_DESC
  IMAGE_COLLECTION_ID_ASC
  IMAGE_COLLECTION_ID_DESC
  SHOW_ID_ASC
  SHOW_ID_DESC
  FIRST_PUBLISH_DATE_ASC
  FIRST_PUBLISH_DATE_DESC
  AUDIO_BINARY_ID_ASC
  AUDIO_BINARY_ID_DESC
  STATUS_ASC
  STATUS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum ItemSortOrder {
  ID_ASC
  ID_DESC
}

type ItemsSearchConnection {
  pageInfo: PageInfo
  totalCount: Int!
  nodes: [Item!]!
  _links: JSON @deprecated(reason: "only for old / hal-json queries")
  _raw: JSON @deprecated(reason: "only for internal debugging")
}

enum ItemType {
  """
  An episode is a complete video/audio. Episodes can be assigned to seasons or
  shows. A part of an episode is called section.
  """
  EPISODE

  """
  An event livestream is a time limited livestream valid for a certain event, e.g. a football match.
  """
  EVENT_LIVESTREAM

  """A section is a part of an episode, e.g. a scene of an episode."""
  SECTION

  """
  An extra is a special broadcast about another asset and can be used on items
  or groupings. Extras can be for example trailers, interviews, making-ofs or
  behind-the-scenes.
  """
  EXTRA
}

"""
A filter to be used against ItemType fields. All fields are combined with a logical ‘and.’
"""
input ItemTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: ItemType

  """Not equal to the specified value."""
  notEqualTo: ItemType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: ItemType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: ItemType

  """Included in the specified list."""
  in: [ItemType!]

  """Not included in the specified list."""
  notIn: [ItemType!]

  """Less than the specified value."""
  lessThan: ItemType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: ItemType

  """Greater than the specified value."""
  greaterThan: ItemType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: ItemType
}

scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Included in the specified list."""
  in: [JSON!]

  """Not included in the specified list."""
  notIn: [JSON!]

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains the specified key."""
  containsKey: String

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contained by the specified JSON."""
  containedBy: JSON
}

type Migration implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  rowId: Int!
  name: String!
  hash: String!
  executedAt: Datetime
}

"""
A condition to be used against `Migration` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MigrationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `hash` field."""
  hash: String

  """Checks for equality with the object’s `executedAt` field."""
  executedAt: Datetime
}

"""
A filter to be used against `Migration` object types. All fields are combined with a logical ‘and.’
"""
input MigrationFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `hash` field."""
  hash: StringFilter

  """Filter by the object’s `executedAt` field."""
  executedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [MigrationFilter!]

  """Checks for any expressions in this list."""
  or: [MigrationFilter!]

  """Negates the expression."""
  not: MigrationFilter
}

"""A connection to a list of `Migration` values."""
type MigrationsConnection {
  """A list of `Migration` objects."""
  nodes: [Migration!]!

  """
  A list of edges which contains the `Migration` and cursor to aid in pagination.
  """
  edges: [MigrationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Migration` you could get from the connection."""
  totalCount: Int!
}

"""A `Migration` edge in the connection."""
type MigrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Migration` at the end of the edge."""
  node: Migration!
}

"""Methods to use when ordering `Migration`."""
enum MigrationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  HASH_ASC
  HASH_DESC
  EXECUTED_AT_ASC
  EXECUTED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """ Mutation to delete a history entry by the item that it contains. """
  deleteHistoryEntryByItem(input: DeleteHistoryEntryByItemInput): DeletePayload

  """ Mutation to update a program set subscription, identifying it by its program set id and the user of the request. 
  """
  updateProgramSetSubscriptionByProgramSet(input: ProgramSetSubscriptionUpdateByProgramSetIdInput): ProgramSetSubscriptionPayload

  """ Mutation to synchronize the user data. """
  syncUserData(input: EndUserSyncInput): EndUserPayload

  """ Update a Bookmark object. """
  updateBookmark(input: BookmarkUpdateInput!): BookmarkPayload

  """ Create a new BookmarkList object. """
  createBookmarkList(input: BookmarkListCreateInput!): BookmarkListPayload

  """ Update a BookmarkList object. """
  updateBookmarkList(input: BookmarkListUpdateInput!): BookmarkListPayload
  addEntryToBookmarkList(input: BookmarkListEntryListInput!): BookmarkListPayload
  removeEntryFromBookmarkList(input: BookmarkListEntryListInput!): BookmarkListPayload
  removeAllEntriesFromBookmarkList(input: BookmarkListRemoveAllListInput!): BookmarkListPayload

  """ Create a new EndUser object. """
  createEndUser(input: EndUserCreateInput!): EndUserPayload

  """ Upsert a EndUser object. """
  upsertEndUser(input: EndUserCreateInput!): EndUserPayload

  """ Update a EndUser object. """
  updateEndUser(input: EndUserUpdateInput!): EndUserPayload

  """ Create a new HistoryEntry object. """
  createHistoryEntry(input: HistoryEntryCreateInput!): HistoryEntryPayload

  """ Upsert a HistoryEntry object. """
  upsertHistoryEntry(input: HistoryEntryCreateInput!): HistoryEntryPayload

  """ Update a HistoryEntry object. """
  updateHistoryEntry(input: HistoryEntryUpdateInput!): HistoryEntryPayload

  """ Create a new Playlist object. """
  createPlaylist(input: PlaylistCreateInput!): PlaylistPayload

  """ Update a Playlist object. """
  updatePlaylist(input: PlaylistUpdateInput!): PlaylistPayload
  addEntryToPlaylist(input: PlaylistEntryListInput!): PlaylistPayload
  removeEntryFromPlaylist(input: PlaylistEntryListInput!): PlaylistPayload
  removeAllEntriesFromPlaylist(input: PlaylistRemoveAllListInput!): PlaylistPayload

  """ Update a ProgramSetSubscription object. """
  updateProgramSetSubscription(input: ProgramSetSubscriptionUpdateInput!): ProgramSetSubscriptionPayload

  """ Create a new Property object. """
  createProperty(input: PropertyCreateInput!): PropertyPayload

  """ Update a Property object. """
  updateProperty(input: PropertyUpdateInput!): PropertyPayload

  """ Create a new Queue object. """
  createQueue(input: QueueCreateInput!): QueuePayload

  """ Update a Queue object. """
  updateQueue(input: QueueUpdateInput!): QueuePayload
  addEntryToQueue(input: QueueEntryListInput!): QueuePayload
  removeEntryFromQueue(input: QueueEntryListInput!): QueuePayload
  removeAllEntriesFromQueue(input: QueueRemoveAllListInput!): QueuePayload

  """ Create a new SubscriptionList object. """
  createSubscriptionList(input: SubscriptionListCreateInput!): SubscriptionListPayload

  """ Update a SubscriptionList object. """
  updateSubscriptionList(input: SubscriptionListUpdateInput!): SubscriptionListPayload
  addProgramSetToSubscriptionList(input: SubscriptionListProgramSetListInput!): SubscriptionListPayload
  removeProgramSetFromSubscriptionList(input: SubscriptionListProgramSetListInput!): SubscriptionListPayload
  removeAllProgramSetsFromSubscriptionList(input: SubscriptionListRemoveAllListInput!): SubscriptionListPayload

  """ Delete a HistoryEntry object. """
  deleteHistoryEntry(input: DeleteInput!): DeletePayload

  """ Delete a Playlist object. """
  deletePlaylist(input: DeleteInput!): DeletePayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Organization implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  rowId: Int
  name: String!
  coreId: String
  coreDocument: JSON
  order: Int
  title: String

  """Reads and enables pagination through a set of `PublicationService`."""
  publicationServicesByOrganizationName(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PublicationService`."""
    orderBy: [PublicationServicesOrderBy!] = [ORDER_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PublicationServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PublicationServiceFilter
  ): PublicationServicesConnection!

  """
  Reads and enables pagination through a set of `ImagesCollectionsBinariesView`.
  """
  images(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): ImagesCollectionsBinariesViewsConnection!

  """
  Reads and enables pagination through a set of `ImagesCollectionsBinariesView`.
  """
  imagesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [ImagesCollectionsBinariesView!]

  """Reads and enables pagination through a set of `PublicationService`."""
  publicationServices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PublicationService`."""
    orderBy: [PublicationServicesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PublicationServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PublicationServiceFilter
  ): PublicationServicesConnection!
  sharingUrl: URL
  path: String
  url(variant: UrlVariant): String
  tracking: JSON
  _links: JSON
  image(aspect: AspectRatio): ImageType
}

"""
A condition to be used against `Organization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `coreId` field."""
  coreId: String

  """Checks for equality with the object’s `coreDocument` field."""
  coreDocument: JSON

  """Checks for equality with the object’s `order` field."""
  order: Int

  """Checks for equality with the object’s `title` field."""
  title: String
}

"""
A filter to be used against `Organization` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `coreId` field."""
  coreId: StringFilter

  """Filter by the object’s `coreDocument` field."""
  coreDocument: JSONFilter

  """Filter by the object’s `order` field."""
  order: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Checks for all expressions in this list."""
  and: [OrganizationFilter!]

  """Checks for any expressions in this list."""
  or: [OrganizationFilter!]

  """Negates the expression."""
  not: OrganizationFilter
}

"""A connection to a list of `Organization` values."""
type OrganizationsConnection {
  """A list of `Organization` objects."""
  nodes: [Organization!]!

  """
  A list of edges which contains the `Organization` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organization` you could get from the connection."""
  totalCount: Int!
  _links: JSON
  tracking: JSON
}

"""A `Organization` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organization` at the end of the edge."""
  node: Organization!
}

"""Methods to use when ordering `Organization`."""
enum OrganizationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CORE_ID_ASC
  CORE_ID_DESC
  CORE_DOCUMENT_ASC
  CORE_DOCUMENT_DESC
  ORDER_ASC
  ORDER_DESC
  TITLE_ASC
  TITLE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type PermanentLivestream implements Node & CoreTeaser {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  rowId: String!
  coreId: String
  externalIds: [String]
  publicationServiceId: Int!
  title: String!
  image: ImageType
  coreDocument: JSON
  stream: JSON @deprecated(reason: "only for old / hal-json queries")
  tracking: JSON
  audios: [StreamType!]
  imageCollectionId: String
  audioBinaryId: String
  publisherCoreId: String
  order: Int

  """
  Reads a single `PublicationService` that is related to this `PermanentLivestream`.
  """
  publicationService: PublicationService

  """Reads and enables pagination through a set of `AudioBinary`."""
  audioList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [AudioBinary!]

  """
  Reads and enables pagination through a set of `ImagesCollectionsBinariesView`.
  """
  images(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): ImagesCollectionsBinariesViewsConnection!

  """
  Reads and enables pagination through a set of `ImagesCollectionsBinariesView`.
  """
  imagesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [ImagesCollectionsBinariesView!]
  id: ID!
  summary: String
  editorialDescription: String @deprecated(reason: "experimental")
  description: HTML
  _raw: JSON @deprecated(reason: "only for internal debugging")
}

"""
A condition to be used against `PermanentLivestream` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input PermanentLivestreamCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `coreId` field."""
  coreId: String

  """Checks for equality with the object’s `externalIds` field."""
  externalIds: [String]

  """Checks for equality with the object’s `publicationServiceId` field."""
  publicationServiceId: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `image` field."""
  image: ImageTypeInput

  """Checks for equality with the object’s `coreDocument` field."""
  coreDocument: JSON

  """Checks for equality with the object’s `stream` field."""
  stream: JSON

  """Checks for equality with the object’s `tracking` field."""
  tracking: JSON

  """Checks for equality with the object’s `audios` field."""
  audios: [StreamTypeInput]

  """Checks for equality with the object’s `imageCollectionId` field."""
  imageCollectionId: String

  """Checks for equality with the object’s `audioBinaryId` field."""
  audioBinaryId: String

  """Checks for equality with the object’s `publisherCoreId` field."""
  publisherCoreId: String

  """Checks for equality with the object’s `order` field."""
  order: Int
}

"""
A filter to be used against `PermanentLivestream` object types. All fields are combined with a logical ‘and.’
"""
input PermanentLivestreamFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `coreId` field."""
  coreId: StringFilter

  """Filter by the object’s `externalIds` field."""
  externalIds: StringListFilter

  """Filter by the object’s `publicationServiceId` field."""
  publicationServiceId: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `coreDocument` field."""
  coreDocument: JSONFilter

  """Filter by the object’s `stream` field."""
  stream: JSONFilter

  """Filter by the object’s `tracking` field."""
  tracking: JSONFilter

  """Filter by the object’s `imageCollectionId` field."""
  imageCollectionId: StringFilter

  """Filter by the object’s `audioBinaryId` field."""
  audioBinaryId: StringFilter

  """Filter by the object’s `publisherCoreId` field."""
  publisherCoreId: StringFilter

  """Filter by the object’s `order` field."""
  order: IntFilter

  """Filter by the object’s `image` field."""
  image: ImageTypeFilter

  """Checks for all expressions in this list."""
  and: [PermanentLivestreamFilter!]

  """Checks for any expressions in this list."""
  or: [PermanentLivestreamFilter!]

  """Negates the expression."""
  not: PermanentLivestreamFilter
}

"""A connection to a list of `PermanentLivestream` values."""
type PermanentLivestreamsConnection {
  """A list of `PermanentLivestream` objects."""
  nodes: [PermanentLivestream!]!

  """
  A list of edges which contains the `PermanentLivestream` and cursor to aid in pagination.
  """
  edges: [PermanentLivestreamsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PermanentLivestream` you could get from the connection.
  """
  totalCount: Int!
}

"""A `PermanentLivestream` edge in the connection."""
type PermanentLivestreamsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PermanentLivestream` at the end of the edge."""
  node: PermanentLivestream!
}

"""Methods to use when ordering `PermanentLivestream`."""
enum PermanentLivestreamsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CORE_ID_ASC
  CORE_ID_DESC
  EXTERNAL_IDS_ASC
  EXTERNAL_IDS_DESC
  PUBLICATION_SERVICE_ID_ASC
  PUBLICATION_SERVICE_ID_DESC
  TITLE_ASC
  TITLE_DESC
  IMAGE_ASC
  IMAGE_DESC
  CORE_DOCUMENT_ASC
  CORE_DOCUMENT_DESC
  STREAM_ASC
  STREAM_DESC
  TRACKING_ASC
  TRACKING_DESC
  AUDIOS_ASC
  AUDIOS_DESC
  IMAGE_COLLECTION_ID_ASC
  IMAGE_COLLECTION_ID_DESC
  AUDIO_BINARY_ID_ASC
  AUDIO_BINARY_ID_DESC
  PUBLISHER_CORE_ID_ASC
  PUBLISHER_CORE_ID_DESC
  ORDER_ASC
  ORDER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type PermantentLivestreamConnection {
  totalCount: Int!
  nodes: [PermanentLivestream!]
}

""" A list of items. (de: Playlist, en: Single playlist) """
type Playlist implements PlaylistInterface {
  id: ID!
  baseIdPrefix: String!

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ Items of this list. (de: Items, en: Items) """
  entries(after: String, first: Int, before: String, last: Int, filter: ItemFilterB, orderBy: ItemSortOrder): ItemConnection

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """ Describes if the list is private and can\'t be shared with other users. () 
  """
  private: Boolean

  """ Zero based index of the playlist in the list of all user playlists. (de: Sortier-Index, en: Sort Index) 
  """
  sortIndex: Int

  """ The title of the playlist. (de: Titel, en: Title) """
  title: String

  """ Associates Subscriptions, History items, Playlists, the Queue and User Properties with a user. (de: User, en: user) 
  """
  user: EndUserInterface
}

""" This is a generated connection for Playlist """
type PlaylistConnection {
  count: Int
  edges: [PlaylistEdge]
  nodes: [PlaylistInterface]
  pageInfo: PageInfo!
}

input PlaylistConnectionFilterB {
  """ A filter that matches empty connections. """
  empty: BooleanFilterB

  """ A filter that matches if the specified ID is part of the connection. """
  contains: ID
}

""" Input parameter for the create mutation of Playlist """
input PlaylistCreateInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The type of the created object. Defaults to Playlist """
  type: String = "Playlist"

  """ Items of this list. (de: Items, en: Items) """
  entries: [ItemCreateInput]

  """ Describes if the list is private and can\'t be shared with other users. () 
  """
  private: Boolean

  """ Zero based index of the playlist in the list of all user playlists. (de: Sortier-Index, en: Sort Index) 
  """
  sortIndex: Int

  """ The title of the playlist. (de: Titel, en: Title) """
  title: String
}

"""  This is a generated edge for Playlist """
type PlaylistEdge {
  cursor: String!
  node: PlaylistInterface
}

input PlaylistEntryListInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String
  entry: ItemCreateInput!
  playlist: ID!
}

input PlaylistFilterB {
  """ Filter by values of property createdAt """
  createdAt: DateFilterB

  """ Filter by values of property modifiedAt """
  modifiedAt: DateFilterB

  """ Filter by values of property private """
  private: BooleanFilterB

  """ Filter by values of property sortIndex """
  sortIndex: IntFilterB

  """ Filter by values of property title """
  title: StringFilterB

  """ Filter by values of property user """
  user: EndUserRelationFilterB
}

""" A list of items. (de: Playlist, en: Single playlist) """
interface PlaylistInterface {
  id: ID!
  baseIdPrefix: String!

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ Items of this list. (de: Items, en: Items) """
  entries(after: String, first: Int, before: String, last: Int, filter: ItemFilterB, orderBy: ItemSortOrder): ItemConnection

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """ Describes if the list is private and can\'t be shared with other users. () 
  """
  private: Boolean

  """ Zero based index of the playlist in the list of all user playlists. (de: Sortier-Index, en: Sort Index) 
  """
  sortIndex: Int

  """ The title of the playlist. (de: Titel, en: Title) """
  title: String

  """ Associates Subscriptions, History items, Playlists, the Queue and User Properties with a user. (de: User, en: user) 
  """
  user: EndUserInterface
}

""" The payload returned from mutations of Playlist. """
type PlaylistPayload {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The mutated object. """
  changedPlaylist: Playlist
}

input PlaylistRelationFilterB {
  """ A filter that matches when the relation points to the object with the specified ID. 
  """
  id: IDFilterB

  """ A filter that matches when the relation exists. """
  exists: BooleanFilterB
}

input PlaylistRemoveAllListInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String
  playlist: ID!
}

enum PlaylistSortOrder {
  CREATEDAT_ASC
  CREATEDAT_DESC
  ENTRIES_ID_ASC
  ENTRIES_ID_DESC
  MODIFIEDAT_ASC
  MODIFIEDAT_DESC
  PRIVATE_ASC
  PRIVATE_DESC
  SORTINDEX_ASC
  SORTINDEX_DESC
  TITLE_ASC
  TITLE_DESC
}

""" Input parameter for the update mutation of Playlist """
input PlaylistUpdateInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The ID of the updated object. """
  id: ID!

  """ Items of this list. (de: Items, en: Items) """
  entries: [ItemCreateInput]

  """ Describes if the list is private and can\'t be shared with other users. () 
  """
  private: Boolean

  """ Zero based index of the playlist in the list of all user playlists. (de: Sortier-Index, en: Sort Index) 
  """
  sortIndex: Int

  """ The title of the playlist. (de: Titel, en: Title) """
  title: String
}

type ProgramSet implements Node & Teaser & CoreTeaser {
  rowId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  publicationServiceId: Int!
  title: String!
  synopsis: String
  numberOfElements: Int
  image: ImageType
  editorialCategoryId: String
  coreId: String
  coreDocument: JSON
  imageCollectionId: String

  """
  gets updated when items are added to the programset, or updated (including depublicaiton)
  """
  lastItemModified: Datetime

  """gets updated when items are added to the programset"""
  lastItemAdded: Datetime

  """
  Reads a single `PublicationService` that is related to this `ProgramSet`.
  """
  publicationService: PublicationService

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItemFilter
  ): ItemsConnection!

  """Reads and enables pagination through a set of `Grouping`."""
  groupingsByProgramsetId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Grouping`."""
    orderBy: [GroupingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupingFilter
  ): GroupingsConnection!

  """Reads and enables pagination through a set of `Grouping`."""
  groupingsByShowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Grouping`."""
    orderBy: [GroupingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupingFilter
  ): GroupingsConnection!

  """
  Reads and enables pagination through a set of `CategoriesToProgramSet`.
  """
  categoriesToProgramSetsByProgramSetCoreId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CategoriesToProgramSet`."""
    orderBy: [CategoriesToProgramSetsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoriesToProgramSetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CategoriesToProgramSetFilter
  ): CategoriesToProgramSetsConnection!

  """
  Reads and enables pagination through a set of `CategoriesToProgramSet`.
  """
  categoriesToProgramSetsByProgramSetCoreIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CategoriesToProgramSet`."""
    orderBy: [CategoriesToProgramSetsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoriesToProgramSetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CategoriesToProgramSetFilter
  ): [CategoriesToProgramSet!]!
  editorialCategory: EditorialCategory

  """
  Reads and enables pagination through a set of `ImagesCollectionsBinariesView`.
  """
  images(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): ImagesCollectionsBinariesViewsConnection!

  """
  Reads and enables pagination through a set of `ImagesCollectionsBinariesView`.
  """
  imagesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [ImagesCollectionsBinariesView!]

  """Reads and enables pagination through a set of `EditorialCategory`."""
  editorialCategories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EditorialCategory`."""
    orderBy: [EditorialCategoriesOrderBy!] = [ORDER_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EditorialCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EditorialCategoryFilter
  ): ProgramSetEditorialCategoriesManyToManyConnection!

  """Reads and enables pagination through a set of `EditorialCategory`."""
  editorialCategoriesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EditorialCategory`."""
    orderBy: [EditorialCategoriesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EditorialCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EditorialCategoryFilter
  ): [EditorialCategory!]!
  showType: ShowType!
  description: HTML
  path: String
  url(variant: UrlVariant): String
  sharingUrl: URL
  tracking: JSON
  _links: JSON
  id: ID!
  core(filter: String, key: String): JSON
  editorialDescription: String @deprecated(reason: "experimental")
  _raw: JSON @deprecated(reason: "only for internal debugging")
}

"""
A condition to be used against `ProgramSet` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ProgramSetCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `publicationServiceId` field."""
  publicationServiceId: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `synopsis` field."""
  synopsis: String

  """Checks for equality with the object’s `numberOfElements` field."""
  numberOfElements: Int

  """Checks for equality with the object’s `image` field."""
  image: ImageTypeInput

  """Checks for equality with the object’s `editorialCategoryId` field."""
  editorialCategoryId: String

  """Checks for equality with the object’s `coreId` field."""
  coreId: String

  """Checks for equality with the object’s `coreDocument` field."""
  coreDocument: JSON

  """Checks for equality with the object’s `imageCollectionId` field."""
  imageCollectionId: String

  """Checks for equality with the object’s `lastItemModified` field."""
  lastItemModified: Datetime

  """Checks for equality with the object’s `lastItemAdded` field."""
  lastItemAdded: Datetime
}

""" This is a generated connection for ProgramSet """
type ProgramSetConnection {
  count: Int
  edges: [ProgramSetEdge]
  nodes: [ProgramSet]
  pageInfo: PageInfo!
}

input ProgramSetConnectionFilterB {
  """ Filter by values of property id """
  id: IntFilterB

  """ A filter that matches empty connections. """
  empty: BooleanFilterB
}

""" Input parameter for the create mutation of ProgramSet """
input ProgramSetCreateInput {
  """ The type of the created object. Defaults to ProgramSet """
  type: String = "ProgramSet"

  """ Item ID (de: (CoreMedia-)ID der Entity, en: ID of the entity (in CoreMedia)) 
  """
  id: Int!
}

"""  This is a generated edge for ProgramSet """
type ProgramSetEdge {
  cursor: String!
  node: ProgramSet
}

"""
A connection to a list of `EditorialCategory` values, with data from `CategoriesToProgramSet`.
"""
type ProgramSetEditorialCategoriesManyToManyConnection {
  """A list of `EditorialCategory` objects."""
  nodes: [EditorialCategory!]!

  """
  A list of edges which contains the `EditorialCategory`, info from the
  `CategoriesToProgramSet`, and the cursor to aid in pagination.
  """
  edges: [ProgramSetEditorialCategoriesManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EditorialCategory` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `EditorialCategory` edge in the connection, with data from `CategoriesToProgramSet`.
"""
type ProgramSetEditorialCategoriesManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EditorialCategory` at the end of the edge."""
  node: EditorialCategory!
}

"""
A filter to be used against `ProgramSet` object types. All fields are combined with a logical ‘and.’
"""
input ProgramSetFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `publicationServiceId` field."""
  publicationServiceId: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `synopsis` field."""
  synopsis: StringFilter

  """Filter by the object’s `numberOfElements` field."""
  numberOfElements: IntFilter

  """Filter by the object’s `editorialCategoryId` field."""
  editorialCategoryId: StringFilter

  """Filter by the object’s `coreId` field."""
  coreId: StringFilter

  """Filter by the object’s `coreDocument` field."""
  coreDocument: JSONFilter

  """Filter by the object’s `imageCollectionId` field."""
  imageCollectionId: StringFilter

  """Filter by the object’s `lastItemModified` field."""
  lastItemModified: DatetimeFilter

  """Filter by the object’s `lastItemAdded` field."""
  lastItemAdded: DatetimeFilter

  """Filter by the object’s `image` field."""
  image: ImageTypeFilter

  """Checks for all expressions in this list."""
  and: [ProgramSetFilter!]

  """Checks for any expressions in this list."""
  or: [ProgramSetFilter!]

  """Negates the expression."""
  not: ProgramSetFilter
}

input ProgramSetFilterB {
  """ Filter by values of property id """
  id: IntFilterB
}

input ProgramSetRelationFilterB {
  """ Filter by values of property id """
  id: IntFilterB
}

"""A connection to a list of `ProgramSet` values."""
type ProgramSetsConnection {
  """A list of `ProgramSet` objects."""
  nodes: [ProgramSet!]!

  """
  A list of edges which contains the `ProgramSet` and cursor to aid in pagination.
  """
  edges: [ProgramSetsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProgramSet` you could get from the connection."""
  totalCount: Int!
}

type ProgramSetSection implements Section {
  id: ID!
  title: String
  key: String
  type: String
  layout: JSON
  tracking: JSON
  nodes(limit: Int, offset: Int = 0): [ProgramSet!]
  nodeType: String @deprecated(reason: "only for backwards compatibility")
  nodeTypes: [TeaserTypeATG!]
  teaserType: String @deprecated(reason: "WIP")
  teaserTypes: [String!] @deprecated(reason: "WIP")
  programSets: [ProgramSet!] @deprecated(reason: "only for backwards compatibility")
}

"""A `ProgramSet` edge in the connection."""
type ProgramSetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProgramSet` at the end of the edge."""
  node: ProgramSet!
}

"""Methods to use when ordering `ProgramSet`."""
enum ProgramSetsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PUBLICATION_SERVICE_ID_ASC
  PUBLICATION_SERVICE_ID_DESC
  TITLE_ASC
  TITLE_DESC
  SYNOPSIS_ASC
  SYNOPSIS_DESC
  NUMBER_OF_ELEMENTS_ASC
  NUMBER_OF_ELEMENTS_DESC
  IMAGE_ASC
  IMAGE_DESC
  EDITORIAL_CATEGORY_ID_ASC
  EDITORIAL_CATEGORY_ID_DESC
  CORE_ID_ASC
  CORE_ID_DESC
  CORE_DOCUMENT_ASC
  CORE_DOCUMENT_DESC
  IMAGE_COLLECTION_ID_ASC
  IMAGE_COLLECTION_ID_DESC
  LAST_ITEM_MODIFIED_ASC
  LAST_ITEM_MODIFIED_DESC
  LAST_ITEM_ADDED_ASC
  LAST_ITEM_ADDED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum ProgramSetSortOrder {
  ID_ASC
  ID_DESC
}

type ProgramSetsSearchConnection {
  pageInfo: PageInfo
  totalCount: Int!
  nodes: [ProgramSet!]!
  _links: JSON @deprecated(reason: "only for old / hal-json queries")
  _raw: JSON @deprecated(reason: "only for internal debugging")
}

""" Describes a single program set subscription by an user. (de: Abonnement, en: Program set subscription) 
"""
type ProgramSetSubscription implements ProgramSetSubscriptionInterface {
  id: ID!
  baseIdPrefix: String!

  """  () """
  belongsTo: SubscriptionListInterface

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ When the user visited the subscribed program set for the last time. (de: zuletzt gesehen, en: last visited at) 
  """
  lastVisitedAt: DateTime

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """ When the user added the program set to the subscriptions. (de: Abobeginn, en: start date of the subscription) 
  """
  subscribedAt: DateTime

  """ The program set a user has subscribed to. (de: abonnierte Serie, en: subscribed program set) 
  """
  subscribedProgramSet: ProgramSet
}

""" This is a generated connection for ProgramSetSubscription """
type ProgramSetSubscriptionConnection {
  count: Int
  edges: [ProgramSetSubscriptionEdge]
  nodes: [ProgramSetSubscriptionInterface]
  pageInfo: PageInfo!
}

input ProgramSetSubscriptionConnectionFilterB {
  """ Filter by values of property createdAt """
  createdAt: DateFilterB

  """ Filter by values of property lastVisitedAt """
  lastVisitedAt: DateFilterB

  """ Filter by values of property modifiedAt """
  modifiedAt: DateFilterB

  """ Filter by values of property subscribedAt """
  subscribedAt: DateFilterB

  """ A filter that matches empty connections. """
  empty: BooleanFilterB
}

""" Input parameter for the create mutation of ProgramSetSubscription """
input ProgramSetSubscriptionCreateInput {
  """ The type of the created object. Defaults to ProgramSetSubscription """
  type: String = "ProgramSetSubscription"

  """ When the user visited the subscribed program set for the last time. (de: zuletzt gesehen, en: last visited at) 
  """
  lastVisitedAt: DateTime

  """ When the user added the program set to the subscriptions. (de: Abobeginn, en: start date of the subscription) 
  """
  subscribedAt: DateTime

  """ The program set a user has subscribed to. (de: abonnierte Serie, en: subscribed program set) 
  """
  subscribedProgramSet: ProgramSetCreateInput!
}

"""  This is a generated edge for ProgramSetSubscription """
type ProgramSetSubscriptionEdge {
  cursor: String!
  node: ProgramSetSubscriptionInterface
}

input ProgramSetSubscriptionFilterB {
  """ Filter by values of property createdAt """
  createdAt: DateFilterB

  """ Filter by values of property lastVisitedAt """
  lastVisitedAt: DateFilterB

  """ Filter by values of property modifiedAt """
  modifiedAt: DateFilterB

  """ Filter by values of property subscribedAt """
  subscribedAt: DateFilterB
}

""" Describes a single program set subscription by an user. (de: Abonnement, en: Program set subscription) 
"""
interface ProgramSetSubscriptionInterface {
  id: ID!
  baseIdPrefix: String!

  """  () """
  belongsTo: SubscriptionListInterface

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ When the user visited the subscribed program set for the last time. (de: zuletzt gesehen, en: last visited at) 
  """
  lastVisitedAt: DateTime

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """ When the user added the program set to the subscriptions. (de: Abobeginn, en: start date of the subscription) 
  """
  subscribedAt: DateTime

  """ The program set a user has subscribed to. (de: abonnierte Serie, en: subscribed program set) 
  """
  subscribedProgramSet: ProgramSet
}

""" The payload returned from mutations of ProgramSetSubscription. """
type ProgramSetSubscriptionPayload {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The mutated object. """
  changedProgramSetSubscription: ProgramSetSubscription
}

input ProgramSetSubscriptionRelationFilterB {
  """ Filter by values of property createdAt """
  createdAt: DateFilterB

  """ Filter by values of property lastVisitedAt """
  lastVisitedAt: DateFilterB

  """ Filter by values of property modifiedAt """
  modifiedAt: DateFilterB

  """ Filter by values of property subscribedAt """
  subscribedAt: DateFilterB
}

input ProgramSetSubscriptionRemoveAllListInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String
  programSetSubscription: ID!
}

enum ProgramSetSubscriptionSortOrder {
  CREATEDAT_ASC
  CREATEDAT_DESC
  LASTVISITEDAT_ASC
  LASTVISITEDAT_DESC
  MODIFIEDAT_ASC
  MODIFIEDAT_DESC
  SUBSCRIBEDAT_ASC
  SUBSCRIBEDAT_DESC
  SUBSCRIBEDPROGRAMSET_ID_ASC
  SUBSCRIBEDPROGRAMSET_ID_DESC
}

""" Input parameter for update programset subscription by its programset id
"""
input ProgramSetSubscriptionUpdateByProgramSetIdInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The progra set subscription to get updated. """
  programSetSubscription: ProgramSetSubscriptionCreateInput!
}

""" Input parameter for the update mutation of ProgramSetSubscription """
input ProgramSetSubscriptionUpdateInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The ID of the updated object. """
  id: ID!

  """ When the user visited the subscribed program set for the last time. (de: zuletzt gesehen, en: last visited at) 
  """
  lastVisitedAt: DateTime

  """ When the user added the program set to the subscriptions. (de: Abobeginn, en: start date of the subscription) 
  """
  subscribedAt: DateTime

  """ The program set a user has subscribed to. (de: abonnierte Serie, en: subscribed program set) 
  """
  subscribedProgramSet: ProgramSetCreateInput
}

""" Describes a single property. (de: Eigenschaft, en: Property) """
type Property implements PropertyInterface {
  id: ID!
  baseIdPrefix: String!

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ The key of a single profile setting. (de: Schlüssel einer Profileinstellung, en: Property key) 
  """
  key: String

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """ Associates Subscriptions, History items, Playlists, the Queue and User Properties with a user. (de: User, en: user) 
  """
  user: EndUserInterface

  """ The value of a single profile setting. (de: Wert einer Profileinstellung, en: Property value) 
  """
  value: String
}

""" This is a generated connection for Property """
type PropertyConnection {
  count: Int
  edges: [PropertyEdge]
  nodes: [PropertyInterface]
  pageInfo: PageInfo!
}

input PropertyConnectionFilterB {
  """ A filter that matches empty connections. """
  empty: BooleanFilterB

  """ A filter that matches if the specified ID is part of the connection. """
  contains: ID
}

""" Input parameter for the create mutation of Property """
input PropertyCreateInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The type of the created object. Defaults to Property """
  type: String = "Property"

  """ The key of a single profile setting. (de: Schlüssel einer Profileinstellung, en: Property key) 
  """
  key: String!

  """ The value of a single profile setting. (de: Wert einer Profileinstellung, en: Property value) 
  """
  value: String!
}

"""  This is a generated edge for Property """
type PropertyEdge {
  cursor: String!
  node: PropertyInterface
}

input PropertyFilterB {
  """ Filter by values of property createdAt """
  createdAt: DateFilterB

  """ Filter by values of property key """
  key: StringFilterB

  """ Filter by values of property modifiedAt """
  modifiedAt: DateFilterB

  """ Filter by values of property user """
  user: EndUserRelationFilterB

  """ Filter by values of property value """
  value: StringFilterB
}

""" Describes a single property. (de: Eigenschaft, en: Property) """
interface PropertyInterface {
  id: ID!
  baseIdPrefix: String!

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ The key of a single profile setting. (de: Schlüssel einer Profileinstellung, en: Property key) 
  """
  key: String

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """ Associates Subscriptions, History items, Playlists, the Queue and User Properties with a user. (de: User, en: user) 
  """
  user: EndUserInterface

  """ The value of a single profile setting. (de: Wert einer Profileinstellung, en: Property value) 
  """
  value: String
}

""" The payload returned from mutations of Property. """
type PropertyPayload {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The mutated object. """
  changedProperty: Property
}

input PropertyRelationFilterB {
  """ A filter that matches when the relation points to the object with the specified ID. 
  """
  id: IDFilterB

  """ A filter that matches when the relation exists. """
  exists: BooleanFilterB
}

input PropertyRemoveAllListInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String
  property: ID!
}

enum PropertySortOrder {
  CREATEDAT_ASC
  CREATEDAT_DESC
  KEY_ASC
  KEY_DESC
  MODIFIEDAT_ASC
  MODIFIEDAT_DESC
  VALUE_ASC
  VALUE_DESC
}

""" Input parameter for the update mutation of Property """
input PropertyUpdateInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The ID of the updated object. """
  id: ID!

  """ The key of a single profile setting. (de: Schlüssel einer Profileinstellung, en: Property key) 
  """
  key: String

  """ The value of a single profile setting. (de: Wert einer Profileinstellung, en: Property value) 
  """
  value: String
}

type PublicationService implements Node & Teaser & CoreTeaser {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  rowId: Int!
  organizationName: String!
  title: String!
  synopsis: String
  genre: String
  brandingColor: String
  dvbServiceId: Int
  numberOfElements: Int
  image: ImageType
  coreId: String
  coreDocument: JSON
  externalIds: [String]
  homepageUrl: String
  order: Int
  parentServiceId: String

  """
  Reads a single `Organization` that is related to this `PublicationService`.
  """
  organization: Organization

  """Reads and enables pagination through a set of `ProgramSet`."""
  programSets(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProgramSet`."""
    orderBy: [ProgramSetsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProgramSetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProgramSetFilter
  ): ProgramSetsConnection!

  """Reads and enables pagination through a set of `PermanentLivestream`."""
  permanentLivestreams(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PermanentLivestream`."""
    orderBy: [PermanentLivestreamsOrderBy!] = [ORDER_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermanentLivestreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PermanentLivestreamFilter
  ): PermanentLivestreamsConnection!

  """
  Reads and enables pagination through a set of `ImagesCollectionsBinariesView`.
  """
  images(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): ImagesCollectionsBinariesViewsConnection!

  """
  Reads and enables pagination through a set of `ImagesCollectionsBinariesView`.
  """
  imagesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [ImagesCollectionsBinariesView!]

  """Reads and enables pagination through a set of `ProgramSet`."""
  shows(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProgramSet`."""
    orderBy: [ProgramSetsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProgramSetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProgramSetFilter
  ): ProgramSetsConnection!
  path: String
  url(variant: UrlVariant): String
  sharingUrl: URL
  tracking: JSON
  _links: JSON
  id: ID!
  _raw: JSON @deprecated(reason: "only for internal debugging")
  editorialDescription: String @deprecated(reason: "experimental")
}

"""
A condition to be used against `PublicationService` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PublicationServiceCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `organizationName` field."""
  organizationName: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `synopsis` field."""
  synopsis: String

  """Checks for equality with the object’s `genre` field."""
  genre: String

  """Checks for equality with the object’s `brandingColor` field."""
  brandingColor: String

  """Checks for equality with the object’s `dvbServiceId` field."""
  dvbServiceId: Int

  """Checks for equality with the object’s `numberOfElements` field."""
  numberOfElements: Int

  """Checks for equality with the object’s `image` field."""
  image: ImageTypeInput

  """Checks for equality with the object’s `coreId` field."""
  coreId: String

  """Checks for equality with the object’s `coreDocument` field."""
  coreDocument: JSON

  """Checks for equality with the object’s `externalIds` field."""
  externalIds: [String]

  """Checks for equality with the object’s `homepageUrl` field."""
  homepageUrl: String

  """Checks for equality with the object’s `order` field."""
  order: Int

  """Checks for equality with the object’s `parentServiceId` field."""
  parentServiceId: String
}

"""
A filter to be used against `PublicationService` object types. All fields are combined with a logical ‘and.’
"""
input PublicationServiceFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `organizationName` field."""
  organizationName: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `synopsis` field."""
  synopsis: StringFilter

  """Filter by the object’s `genre` field."""
  genre: StringFilter

  """Filter by the object’s `brandingColor` field."""
  brandingColor: StringFilter

  """Filter by the object’s `dvbServiceId` field."""
  dvbServiceId: IntFilter

  """Filter by the object’s `numberOfElements` field."""
  numberOfElements: IntFilter

  """Filter by the object’s `coreId` field."""
  coreId: StringFilter

  """Filter by the object’s `coreDocument` field."""
  coreDocument: JSONFilter

  """Filter by the object’s `externalIds` field."""
  externalIds: StringListFilter

  """Filter by the object’s `homepageUrl` field."""
  homepageUrl: StringFilter

  """Filter by the object’s `order` field."""
  order: IntFilter

  """Filter by the object’s `parentServiceId` field."""
  parentServiceId: StringFilter

  """Filter by the object’s `image` field."""
  image: ImageTypeFilter

  """Checks for all expressions in this list."""
  and: [PublicationServiceFilter!]

  """Checks for any expressions in this list."""
  or: [PublicationServiceFilter!]

  """Negates the expression."""
  not: PublicationServiceFilter
}

"""A connection to a list of `PublicationService` values."""
type PublicationServicesConnection {
  """A list of `PublicationService` objects."""
  nodes: [PublicationService!]!

  """
  A list of edges which contains the `PublicationService` and cursor to aid in pagination.
  """
  edges: [PublicationServicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PublicationService` you could get from the connection.
  """
  totalCount: Int!
}

"""A `PublicationService` edge in the connection."""
type PublicationServicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PublicationService` at the end of the edge."""
  node: PublicationService!
}

"""Methods to use when ordering `PublicationService`."""
enum PublicationServicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ORGANIZATION_NAME_ASC
  ORGANIZATION_NAME_DESC
  TITLE_ASC
  TITLE_DESC
  SYNOPSIS_ASC
  SYNOPSIS_DESC
  GENRE_ASC
  GENRE_DESC
  BRANDING_COLOR_ASC
  BRANDING_COLOR_DESC
  DVB_SERVICE_ID_ASC
  DVB_SERVICE_ID_DESC
  NUMBER_OF_ELEMENTS_ASC
  NUMBER_OF_ELEMENTS_DESC
  IMAGE_ASC
  IMAGE_DESC
  CORE_ID_ASC
  CORE_ID_DESC
  CORE_DOCUMENT_ASC
  CORE_DOCUMENT_DESC
  EXTERNAL_IDS_ASC
  EXTERNAL_IDS_DESC
  HOMEPAGE_URL_ASC
  HOMEPAGE_URL_DESC
  ORDER_ASC
  ORDER_DESC
  PARENT_SERVICE_ID_ASC
  PARENT_SERVICE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

""" undefined (not documented) """
type PublishableThing implements PublishableThingInterface {
  id: ID!
  baseIdPrefix: String!

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """
   If set to true the published content is excluded from automated indexing (e.g.
  by the Google bot) (de: Von Index ausschließen, en: No index) 
  """
  noIndex: Boolean
}

""" This is a generated connection for PublishableThing """
type PublishableThingConnection {
  count: Int
  edges: [PublishableThingEdge]
  nodes: [PublishableThingInterface]
  pageInfo: PageInfo!
}

input PublishableThingConnectionFilterB {
  """ A filter that matches empty connections. """
  empty: BooleanFilterB

  """ A filter that matches if the specified ID is part of the connection. """
  contains: ID
}

"""  This is a generated edge for PublishableThing """
type PublishableThingEdge {
  cursor: String!
  node: PublishableThingInterface
}

input PublishableThingFilterB {
  """ Filter by values of property createdAt """
  createdAt: DateFilterB

  """ Filter by values of property modifiedAt """
  modifiedAt: DateFilterB

  """ Filter by values of property noIndex """
  noIndex: BooleanFilterB
}

""" undefined (not documented) """
interface PublishableThingInterface {
  id: ID!
  baseIdPrefix: String!

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """
   If set to true the published content is excluded from automated indexing (e.g.
  by the Google bot) (de: Von Index ausschließen, en: No index) 
  """
  noIndex: Boolean
}

input PublishableThingRelationFilterB {
  """ A filter that matches when the relation points to the object with the specified ID. 
  """
  id: IDFilterB

  """ A filter that matches when the relation exists. """
  exists: BooleanFilterB
}

enum PublishableThingSortOrder {
  CREATEDAT_ASC
  CREATEDAT_DESC
  MODIFIEDAT_ASC
  MODIFIEDAT_DESC
  NOINDEX_ASC
  NOINDEX_DESC
}

"""All input for the `publishScheduledItems` mutation."""
input PublishScheduledItemsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `publishScheduledItems` mutation."""
type PublishScheduledItemsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  bigInt: BigInt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Query {
  allEndUsers(after: String, first: Int, before: String, last: Int, filter: EndUserFilterB, orderBy: EndUserSortOrder): EndUserConnection

  """ Find all Playlists. """
  allPlaylists(after: String, first: Int, before: String, last: Int, filter: PlaylistFilterB, orderBy: PlaylistSortOrder): PlaylistConnection

  """ Find a Bookmark by id. """
  bookmark(
    """ id of the Bookmark """
    id: ID!
  ): BookmarkInterface

  """ Find a BookmarkList by id. """
  bookmarkList(
    """ id of the BookmarkList """
    id: ID!
  ): BookmarkListInterface
  endUser(id: ID!): EndUserInterface

  """ Find a HistoryEntry by id. """
  historyEntry(
    """ id of the HistoryEntry """
    id: ID!
  ): HistoryEntryInterface

  """ Find a Playlist by id. """
  playlist(
    """ id of the Playlist """
    id: ID!
  ): PlaylistInterface

  """ Find a ProgramSetSubscription by id. """
  programSetSubscription(
    """ id of the ProgramSetSubscription """
    id: ID!
  ): ProgramSetSubscriptionInterface

  """ Find a SubscriptionList by id. """
  subscriptionList(
    """ id of the SubscriptionList """
    id: ID!
  ): SubscriptionListInterface

  """ Find a System by id. """
  system(
    """ id of the System """
    id: ID!
  ): SystemInterface

  """Reads and enables pagination through a set of `Config`."""
  configs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Config`."""
    orderBy: [ConfigsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConfigCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConfigFilter
  ): ConfigsConnection

  """Reads and enables pagination through a set of `EditorialCategory`."""
  editorialCategories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EditorialCategory`."""
    orderBy: [EditorialCategoriesOrderBy!] = [ORDER_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EditorialCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EditorialCategoryFilter
  ): EditorialCategoriesConnection

  """Reads and enables pagination through a set of `EditorialCollection`."""
  editorialCollections(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EditorialCollection`."""
    orderBy: [EditorialCollectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EditorialCollectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EditorialCollectionFilter
  ): EditorialCollectionsConnection

  """Reads and enables pagination through a set of `Grouping`."""
  groupings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Grouping`."""
    orderBy: [GroupingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupingFilter
  ): GroupingsConnection

  """
  Reads and enables pagination through a set of `ImagesCollectionsBinariesView`.
  """
  imagesCollectionsBinariesViews(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ImagesCollectionsBinariesView`."""
    orderBy: [ImagesCollectionsBinariesViewsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImagesCollectionsBinariesViewCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImagesCollectionsBinariesViewFilter
  ): ImagesCollectionsBinariesViewsConnection

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItemFilter
  ): ItemsConnection

  """Reads and enables pagination through a set of `Migration`."""
  migrations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Migration`."""
    orderBy: [MigrationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MigrationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MigrationFilter
  ): MigrationsConnection

  """Reads and enables pagination through a set of `Organization`."""
  organizations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [ORDER_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationFilter
  ): OrganizationsConnection

  """Reads and enables pagination through a set of `PermanentLivestream`."""
  permanentLivestreams(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PermanentLivestream`."""
    orderBy: [PermanentLivestreamsOrderBy!] = [ORDER_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermanentLivestreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PermanentLivestreamFilter
  ): PermanentLivestreamsConnection

  """Reads and enables pagination through a set of `ProgramSet`."""
  programSets(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProgramSet`."""
    orderBy: [ProgramSetsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProgramSetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProgramSetFilter
  ): ProgramSetsConnection

  """Reads and enables pagination through a set of `PublicationService`."""
  publicationServices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PublicationService`."""
    orderBy: [PublicationServicesOrderBy!] = [ORDER_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PublicationServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PublicationServiceFilter
  ): PublicationServicesConnection
  audioBinary(id: String!): AudioBinary
  categoriesToProgramSet(programSetCoreId: String!, categorySophoraId: String!): CategoriesToProgramSet
  concept(itemId: Int!, conceptSource: String!): Concept
  config(key: String!): Config

  """editoralCategory Page from Sophora"""
  editorialCategory(id: ID!, source: SourceSystem, offset: Int = 0, limit: Int = 12): Board
  editorialCategoryBySophoraId(sophoraId: String!): EditorialCategory

  """editorialCollection from Postgres + Sophora"""
  editorialCollection(id: ID!, offset: Int = 0, limit: Int = 12, source: SourceSystem): EditorialCollection
  editorialCollectionByCoremediaId(coremediaId: String!): EditorialCollection
  grouping(id: String!): Grouping
  groupingByCoreId(coreId: String!): Grouping
  imageBinary(id: String!): ImageBinary
  imageCollection(id: String!): ImageCollection
  image(id: String!): Image
  item(id: ID!): Item
  itemByCoreId(coreId: String!): Item
  migration(id: Int!): Migration
  migrationByName(name: String!): Migration
  organizationById(id: Int!): Organization
  organization(id: ID, name: String): Organization
  organizationByCoreId(coreId: String!): Organization
  permanentLivestream(id: String!): PermanentLivestream
  permanentLivestreamByCoreId(coreId: String!): PermanentLivestream
  programSet(id: ID!): ProgramSet
  programSetByCoreId(coreId: String!): ProgramSet
  publicationService(id: ID!): PublicationService
  publicationServiceByTitle(title: String!): PublicationService
  publicationServiceByCoreId(coreId: String!): PublicationService
  transcript(itemId: Int!): Transcript
  debugShowGroups(
    showId: Int

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): DebugShowGroupsConnection

  """Reads and enables pagination through a set of `EditorialCategory`."""
  editorialCategoriesByIds(
    ids: [String]

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): EditorialCategoriesConnection

  """Reads and enables pagination through a set of `EditorialCategory`."""
  editorialCategoriesByIdsList(
    ids: [String]

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [EditorialCategory!]

  """Reads and enables pagination through a set of `EditorialCollection`."""
  editorialCollectionsByIds(
    ids: [String]

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): EditorialCollectionsConnection

  """Reads and enables pagination through a set of `EditorialCollection`."""
  editorialCollectionsByIdsList(
    ids: [String]

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [EditorialCollection!]
  isnumeric(arg0: String!): Boolean

  """Reads and enables pagination through a set of `Item`."""
  itemsByIds(
    ids: [String]
    isPublished: Boolean

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): ItemsConnection

  """Reads and enables pagination through a set of `Item`."""
  itemsByIdsList(
    ids: [String]
    isPublished: Boolean

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Item!]
  jsonbArray(arg0: JSON): [String]

  """Reads and enables pagination through a set of `ProgramSet`."""
  programSetsByIds(
    ids: [String]

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): ProgramSetsConnection

  """Reads and enables pagination through a set of `ProgramSet`."""
  programSetsByIdsList(
    ids: [String]

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [ProgramSet!]

  """Reads and enables pagination through a set of `ProgramSet`."""
  showsWithMapping(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): ProgramSetsConnection

  """Reads and enables pagination through a set of `ProgramSet`."""
  showsWithMappingList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [ProgramSet!]

  """Reads a single `AudioBinary` using its globally unique `ID`."""
  audioBinaryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `AudioBinary`.
    """
    nodeId: ID!
  ): AudioBinary

  """
  Reads a single `CategoriesToProgramSet` using its globally unique `ID`.
  """
  categoriesToProgramSetByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CategoriesToProgramSet`.
    """
    nodeId: ID!
  ): CategoriesToProgramSet

  """Reads a single `Concept` using its globally unique `ID`."""
  conceptByNodeId(
    """The globally unique `ID` to be used in selecting a single `Concept`."""
    nodeId: ID!
  ): Concept

  """Reads a single `Config` using its globally unique `ID`."""
  configByNodeId(
    """The globally unique `ID` to be used in selecting a single `Config`."""
    nodeId: ID!
  ): Config

  """Reads a single `EditorialCategory` using its globally unique `ID`."""
  editorialCategoryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `EditorialCategory`.
    """
    nodeId: ID!
  ): EditorialCategory

  """Reads a single `EditorialCollection` using its globally unique `ID`."""
  editorialCollectionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `EditorialCollection`.
    """
    nodeId: ID!
  ): EditorialCollection

  """Reads a single `Grouping` using its globally unique `ID`."""
  groupingByNodeId(
    """The globally unique `ID` to be used in selecting a single `Grouping`."""
    nodeId: ID!
  ): Grouping

  """Reads a single `ImageBinary` using its globally unique `ID`."""
  imageBinaryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ImageBinary`.
    """
    nodeId: ID!
  ): ImageBinary

  """Reads a single `ImageCollection` using its globally unique `ID`."""
  imageCollectionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ImageCollection`.
    """
    nodeId: ID!
  ): ImageCollection

  """Reads a single `Image` using its globally unique `ID`."""
  imageByNodeId(
    """The globally unique `ID` to be used in selecting a single `Image`."""
    nodeId: ID!
  ): Image

  """Reads a single `Item` using its globally unique `ID`."""
  itemByNodeId(
    """The globally unique `ID` to be used in selecting a single `Item`."""
    nodeId: ID!
  ): Item

  """Reads a single `Migration` using its globally unique `ID`."""
  migrationByNodeId(
    """The globally unique `ID` to be used in selecting a single `Migration`."""
    nodeId: ID!
  ): Migration

  """Reads a single `Organization` using its globally unique `ID`."""
  organizationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Organization`.
    """
    nodeId: ID!
  ): Organization

  """Reads a single `PermanentLivestream` using its globally unique `ID`."""
  permanentLivestreamByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PermanentLivestream`.
    """
    nodeId: ID!
  ): PermanentLivestream

  """Reads a single `ProgramSet` using its globally unique `ID`."""
  programSetByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ProgramSet`.
    """
    nodeId: ID!
  ): ProgramSet

  """Reads a single `PublicationService` using its globally unique `ID`."""
  publicationServiceByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PublicationService`.
    """
    nodeId: ID!
  ): PublicationService

  """Reads a single `Transcript` using its globally unique `ID`."""
  transcriptByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Transcript`.
    """
    nodeId: ID!
  ): Transcript

  """
  Fetches a list of entities using their representations; used for Apollo
  Federation.
  """
  _entities(representations: [_Any!]!): [_Entity]! @deprecated(reason: "Only Apollo Federation should use this")

  """
  Entrypoint for Apollo Federation to determine more information about
  this service.
  """
  _service: _Service! @deprecated(reason: "Only Apollo Federation should use this")

  """search route from Search Service 2.0"""
  search(query: String, offset: Int = 0, limit: Int = 24, type: SearchType = All, source: SourceSystem): SearchResult

  """homescreen Page from Sophora"""
  homescreen(id: ID, source: SourceSystem, limit: Int): Board
  show(id: ID!): ProgramSet
  section(id: ID!): Section
  sections(ids: [ID!]!): [Section!]
  widget(id: ID!): SophoraWidget
  widgets(ids: [ID!]!): [SophoraWidget!]
  compilation(id: ID!): SophoraCompilation
  compilations(ids: [ID!]!): [SophoraCompilation!]
  teasers(ids: [ID!]!): [SophoraTeaser!]
  node(id: ID!): Node

  """
  proxy resolver PEACH endpoint, to translate IDs from Integer to Core ID
  """
  popularEpisodes(category: ID): RecommendationSection @deprecated(reason: "for internal use / debugging")
}

""" A list of items to be played next. (de: Warteschlange, en: Queue) """
type Queue implements QueueInterface {
  id: ID!
  baseIdPrefix: String!

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ Items of the Queue. (de: Items, en: Items) """
  entries(after: String, first: Int, before: String, last: Int, filter: ItemFilterB, orderBy: ItemSortOrder): ItemConnection

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """ Associates Subscriptions, History items, Playlists, the Queue and User Properties with a user. (de: User, en: user) 
  """
  user: EndUserInterface
}

""" This is a generated connection for Queue """
type QueueConnection {
  count: Int
  edges: [QueueEdge]
  nodes: [QueueInterface]
  pageInfo: PageInfo!
}

input QueueConnectionFilterB {
  """ A filter that matches empty connections. """
  empty: BooleanFilterB

  """ A filter that matches if the specified ID is part of the connection. """
  contains: ID
}

""" Input parameter for the create mutation of Queue """
input QueueCreateInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The type of the created object. Defaults to Queue """
  type: String = "Queue"

  """ Items of the Queue. (de: Items, en: Items) """
  entries: [ItemCreateInput]
}

"""  This is a generated edge for Queue """
type QueueEdge {
  cursor: String!
  node: QueueInterface
}

input QueueEntryListInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String
  entry: ItemCreateInput!
  queue: ID!
}

input QueueFilterB {
  """ Filter by values of property createdAt """
  createdAt: DateFilterB

  """ Filter by values of property modifiedAt """
  modifiedAt: DateFilterB

  """ Filter by values of property user """
  user: EndUserRelationFilterB
}

""" A list of items to be played next. (de: Warteschlange, en: Queue) """
interface QueueInterface {
  id: ID!
  baseIdPrefix: String!

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ Items of the Queue. (de: Items, en: Items) """
  entries(after: String, first: Int, before: String, last: Int, filter: ItemFilterB, orderBy: ItemSortOrder): ItemConnection

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """ Associates Subscriptions, History items, Playlists, the Queue and User Properties with a user. (de: User, en: user) 
  """
  user: EndUserInterface
}

""" The payload returned from mutations of Queue. """
type QueuePayload {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The mutated object. """
  changedQueue: Queue
}

input QueueRelationFilterB {
  """ A filter that matches when the relation points to the object with the specified ID. 
  """
  id: IDFilterB

  """ A filter that matches when the relation exists. """
  exists: BooleanFilterB
}

input QueueRemoveAllListInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String
  queue: ID!
}

enum QueueSortOrder {
  CREATEDAT_ASC
  CREATEDAT_DESC
  ENTRIES_ID_ASC
  ENTRIES_ID_DESC
  MODIFIEDAT_ASC
  MODIFIEDAT_DESC
}

""" Input parameter for the update mutation of Queue """
input QueueUpdateInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The ID of the updated object. """
  id: ID!

  """ Items of the Queue. (de: Items, en: Items) """
  entries: [ItemCreateInput]
}

type RecommendationData {
  score: Float!
  item: Item
}

type RecommendationMeta {
  recommendationId: String!
  algorithm: String!
  presentationTitle: String
  fallbackUsed: Boolean!
  endpointUrl: String!
}

type RecommendationsConnection {
  recommendationId: String!
  algorithm: String
  presentationTitle: String
  presentationTitleEn: String
  endpointUrl: String @deprecated(reason: "only for internal use")
  fallbackUsed: Boolean
  recommendations(limit: Int, offset: Int = 0): [RecommendationData!]
}

type RecommendationSection implements Section {
  id: ID!
  title: String
  tracking: JSON
  meta: RecommendationMeta
  key: String @deprecated(reason: "only for internal use")
  type: String
  layout: JSON
  nodeType: String @deprecated(reason: "only for backwards compatibility")
  nodeTypes: [TeaserTypeATG!]
  teaserType: String @deprecated(reason: "WIP")
  teaserTypes: [String!] @deprecated(reason: "WIP")
  nodes(limit: Int, offset: Int = 0): [Teaser!]
  _items: JSON @deprecated(reason: "only for internal stiching/debugging")
}

input RemoteIDFilterB {
  """ A filter that matches if the value of the property is equal to the specified value 
  """
  eq: ID

  """ A filter that matches if the value of the property not equal to the specified value 
  """
  ne: ID

  """ A filter that matches if the value of the property is one of the values in the specified list 
  """
  in: [ID]
}

type SearchResult {
  items: ItemsSearchConnection
  programSets: ProgramSetsSearchConnection
  editorialCategories: EditorialCategoriesConnection
  editorialCollections: EditorialCollectionsConnection
  tracking: JSON
  _links: JSON @deprecated(reason: "only for old / hal-json queries")
}

enum SearchType {
  All
  Items
  ProgramSets
  EditorialCollections
  EditorialCategories
  items @deprecated
  programsets @deprecated
  editorialcollections @deprecated
  editorialcategories @deprecated
}

interface Section {
  id: ID
  title: String
  layout: JSON
  tracking: JSON
  key: String @deprecated(reason: "only for internal use")
  type: String
  teaserType: String @deprecated(reason: "WIP")
  nodeType: String @deprecated(reason: "only for backwards compatibility")
  nodeTypes: [TeaserTypeATG!]
  teaserTypes: [String!] @deprecated(reason: "WIP")
  nodes(limit: Int, offset: Int = 0): [Teaser!]
}

enum ShowType {
  INFINITE_SERIES
  FINITE_SERIES
  SEASON_SERIES
  SINGLE
}

type SophoraCompilation {
  id: ID
  compilationId: String @deprecated(reason: "use `id` instead")
  title: String
  teaserType: String
  _raw: JSON @deprecated(reason: "only for internal debugging")
  teasers: [SophoraTeaser!]
}

type SophoraTeaser implements Teaser {
  id: ID!
  sophoraType: String
  sophoraTitle: String
  titleV2: SophoraTitles @deprecated(reason: "experimental")

  """ mediumTitle from Sophora MeCu API, used as `Kurzbeschreibung` filled by ARDonline Audiotheks-Redaktion 
  """
  editorialDescription: String
  synopsis: String
  type: String
  contentId: ID
  title: String!
  image: ImageType
  url(variant: UrlVariant): String
  sharingUrl: URL
  path: String
  tracking: JSON
  numberOfElements: Int @deprecated(reason: "is always null for items")
  _links: JSON @deprecated(reason: "only for old / hal-json queries")
  _raw: JSON @deprecated(reason: "only for internal debugging")
  node: Teaser
}

type SophoraTitles {
  default: String
  short: String
  long: String
  isVisible: Bool @deprecated(reason: "experimental")
}

type SophoraWidget implements Section {
  id: ID
  title: String
  key: String

  """
   modified Sophora Widget Type, i.e. GRID_LIST, GRID_LIST_COLLAPSIBLE, STAGE,
  SPECIAL, … (might be extended with other values for Special widgets)
  """
  type: String
  displayVariant: WidgetDisplayVariant

  """ S, M, L, XL """
  size: String
  layout: JSON
  tracking: JSON
  nodes(limit: Int, offset: Int = 0): [Teaser!]
  teaserType: String @deprecated(reason: "WIP")
  nodeType: String @deprecated(reason: "only for backwards compatibility")
  nodeTypes: [TeaserTypeATG!]
  teaserTypes: [String!] @deprecated(reason: "WIP")
  _raw: JSON @deprecated(reason: "only for internal debugging")

  """should the Sophora Widget title be displayed by clients or not"""
  titleVisible: Boolean
  compilation: SophoraCompilation
}

enum SourceSystem {
  Hybrid
  CoreMedia @deprecated
  Postgres
  Core
}

enum Status {
  INCOMPLETE
  SCHEDULED
  PUBLISHED
  DEPUBLISHED
  DELETED
  SUPERSEDED
  OBSOLETE
  SPECIAL
}

"""
A filter to be used against Status fields. All fields are combined with a logical ‘and.’
"""
input StatusFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Status

  """Not equal to the specified value."""
  notEqualTo: Status

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Status

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Status

  """Included in the specified list."""
  in: [Status!]

  """Not included in the specified list."""
  notIn: [Status!]

  """Less than the specified value."""
  lessThan: Status

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Status

  """Greater than the specified value."""
  greaterThan: Status

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Status
}

type StreamType {
  url: String
  title: String
  mimetype: String
  rowId: String
}

"""An input for mutations affecting `StreamType`"""
input StreamTypeInput {
  url: String
  title: String
  mimetype: String
  id: String
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

input StringFilterB {
  """ A filter that matches if the value of the property is equal to the specified value 
  """
  eq: String

  """ A filter that matches if the value of the property not equal to the specified value 
  """
  ne: String

  """ A filter that matches if the value of the property is one of the values in the specified list 
  """
  in: [String]

  """ A filter that matches if the value of the property is greater than the specified value 
  """
  gt: String

  """ A filter that matches if the value of the property is greater than or equal to the specified value 
  """
  gte: String

  """ A filter that matches if the value of the property is less than the specified value 
  """
  lt: String

  """ A filter that matches if the value of the property is less than or equal to the specified value 
  """
  lte: String

  """ A filter that matches if the value of the property starts with the specified string value 
  """
  startsWith: String

  """ A filter that matches if the value of the property ends with the specified string value 
  """
  endsWith: String

  """ A filter that matches if the value of the property matches the specified regular expression 
  """
  matches: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """Contains the specified list of values."""
  contains: [String]

  """Contained by the specified list of values."""
  containedBy: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]

  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String
}

""" undefined (not documented) """
type SubscriptionList implements SubscriptionListInterface {
  id: ID!
  baseIdPrefix: String!

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """ List of program set subscriptions of an user. (de: Serien-Abos, en: program set subscriptions) 
  """
  programSets(after: String, first: Int, before: String, last: Int, filter: ProgramSetSubscriptionFilterB, orderBy: ProgramSetSubscriptionSortOrder): ProgramSetSubscriptionConnection

  """ Associates Subscriptions, History items, Playlists, the Queue and User Properties with a user. (de: User, en: user) 
  """
  user: EndUserInterface
}

""" This is a generated connection for SubscriptionList """
type SubscriptionListConnection {
  count: Int
  edges: [SubscriptionListEdge]
  nodes: [SubscriptionListInterface]
  pageInfo: PageInfo!
}

input SubscriptionListConnectionFilterB {
  """ A filter that matches empty connections. """
  empty: BooleanFilterB

  """ A filter that matches if the specified ID is part of the connection. """
  contains: ID
}

""" Input parameter for the create mutation of SubscriptionList """
input SubscriptionListCreateInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The type of the created object. Defaults to SubscriptionList """
  type: String = "SubscriptionList"

  """ List of program set subscriptions of an user. (de: Serien-Abos, en: program set subscriptions) 
  """
  programSets: [ProgramSetSubscriptionCreateInput]!
}

"""  This is a generated edge for SubscriptionList """
type SubscriptionListEdge {
  cursor: String!
  node: SubscriptionListInterface
}

input SubscriptionListFilterB {
  """ Filter by values of property createdAt """
  createdAt: DateFilterB

  """ Filter by values of property modifiedAt """
  modifiedAt: DateFilterB

  """ Filter by values of property programSets """
  programSets: ProgramSetSubscriptionConnectionFilterB

  """ Filter by values of property user """
  user: EndUserRelationFilterB
}

""" undefined (not documented) """
interface SubscriptionListInterface {
  id: ID!
  baseIdPrefix: String!

  """ Specifies when a record was created in the database. (de: Erstellt am, en: created at) 
  """
  createdAt: DateTime

  """ Specifies when a record was last modified. (de: Geändert am, en: modified at) 
  """
  modifiedAt: DateTime

  """ List of program set subscriptions of an user. (de: Serien-Abos, en: program set subscriptions) 
  """
  programSets(after: String, first: Int, before: String, last: Int, filter: ProgramSetSubscriptionFilterB, orderBy: ProgramSetSubscriptionSortOrder): ProgramSetSubscriptionConnection

  """ Associates Subscriptions, History items, Playlists, the Queue and User Properties with a user. (de: User, en: user) 
  """
  user: EndUserInterface
}

""" The payload returned from mutations of SubscriptionList. """
type SubscriptionListPayload {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The mutated object. """
  changedSubscriptionList: SubscriptionList
}

input SubscriptionListProgramSetListInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String
  programSet: ProgramSetSubscriptionCreateInput!
  subscriptionList: ID!
}

input SubscriptionListRelationFilterB {
  """ A filter that matches when the relation points to the object with the specified ID. 
  """
  id: IDFilterB

  """ A filter that matches when the relation exists. """
  exists: BooleanFilterB
}

input SubscriptionListRemoveAllListInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String
  subscriptionList: ID!
}

enum SubscriptionListSortOrder {
  CREATEDAT_ASC
  CREATEDAT_DESC
  MODIFIEDAT_ASC
  MODIFIEDAT_DESC
  PROGRAMSETS_CREATEDAT_ASC
  PROGRAMSETS_CREATEDAT_DESC
  PROGRAMSETS_LASTVISITEDAT_ASC
  PROGRAMSETS_LASTVISITEDAT_DESC
  PROGRAMSETS_MODIFIEDAT_ASC
  PROGRAMSETS_MODIFIEDAT_DESC
  PROGRAMSETS_SUBSCRIBEDAT_ASC
  PROGRAMSETS_SUBSCRIBEDAT_DESC
  PROGRAMSETS_SUBSCRIBEDPROGRAMSET_ID_ASC
  PROGRAMSETS_SUBSCRIBEDPROGRAMSET_ID_DESC
}

""" Input parameter for the update mutation of SubscriptionList """
input SubscriptionListUpdateInput {
  """
   The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation. 
  """
  clientMutationId: String

  """ The ID of the updated object. """
  id: ID!

  """ List of program set subscriptions of an user. (de: Serien-Abos, en: program set subscriptions) 
  """
  programSets: [ProgramSetSubscriptionCreateInput]
}

""" undefined (not documented) """
type System implements SystemInterface {
  id: ID!
  baseIdPrefix: String!
}

""" This is a generated connection for System """
type SystemConnection {
  count: Int
  edges: [SystemEdge]
  nodes: [SystemInterface]
  pageInfo: PageInfo!
}

input SystemConnectionFilterB {
  """ A filter that matches empty connections. """
  empty: BooleanFilterB

  """ A filter that matches if the specified ID is part of the connection. """
  contains: ID
}

"""  This is a generated edge for System """
type SystemEdge {
  cursor: String!
  node: SystemInterface
}

""" undefined (not documented) """
interface SystemInterface {
  id: ID!
  baseIdPrefix: String!
}

input SystemRelationFilterB {
  """ A filter that matches when the relation points to the object with the specified ID. 
  """
  id: IDFilterB

  """ A filter that matches when the relation exists. """
  exists: BooleanFilterB
}

interface Teaser {
  id: ID!
  title: String!

  """ description from ARD Core """
  synopsis: String

  """ mediumTitle from Sophora MeCu API, used as `Kurzbeschreibung` filled by ARDonline Audiotheks-Redaktion 
  """
  editorialDescription: String
  image: ImageType
  url(variant: UrlVariant): String
  sharingUrl: URL
  path: String
  numberOfElements: Int
  tracking: JSON
  _links: JSON @deprecated(reason: "only for old / hal-json queries")
  _raw: JSON @deprecated(reason: "only for internal debugging")
}

enum TeaserTypeATG {
  Item
  EventLivestream
  ProgramSet
  EditorialCollection
  EditorialCategory
  SophoraTeaser
}

type Transcript implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  itemId: Int!
  xml: String
  data: JSON
  lastUpdatedAt: Datetime!

  """Reads a single `Item` that is related to this `Transcript`."""
  item: Item
  start: String
  end: String
  text: String
}

scalar URI

scalar URL

enum UrlVariant {
  API
  SHARING
  WEB
}

enum WidgetDisplayVariant {
  DEFAULT
  SLIDER
  COLLAPSIBLE_GRID
  GRID
}

